
window.projectVersion = '1.6';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:Doctrine" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine.html">Doctrine</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common.html">Common</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Collections" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Collections.html">Collections</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Collections_Expr" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Collections/Expr.html">Expr</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Collections_Expr_ClosureExpressionVisitor" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html">ClosureExpressionVisitor</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Expr_Comparison" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/Comparison.html">Comparison</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Expr_CompositeExpression" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/CompositeExpression.html">CompositeExpression</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Expr_Expression" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/Expression.html">Expression</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Expr_ExpressionVisitor" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/ExpressionVisitor.html">ExpressionVisitor</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Expr_Value" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Expr/Value.html">Value</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Common_Collections_AbstractLazyCollection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/AbstractLazyCollection.html">AbstractLazyCollection</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_ArrayCollection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/ArrayCollection.html">ArrayCollection</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Collection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Collection.html">Collection</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Criteria" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Criteria.html">Criteria</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_ExpressionBuilder" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/ExpressionBuilder.html">ExpressionBuilder</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Selectable" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Selectable.html">Selectable</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "Doctrine.html", "name": "Doctrine", "doc": "Namespace Doctrine"},{"type": "Namespace", "link": "Doctrine/Common.html", "name": "Doctrine\\Common", "doc": "Namespace Doctrine\\Common"},{"type": "Namespace", "link": "Doctrine/Common/Collections.html", "name": "Doctrine\\Common\\Collections", "doc": "Namespace Doctrine\\Common\\Collections"},{"type": "Namespace", "link": "Doctrine/Common/Collections/Expr.html", "name": "Doctrine\\Common\\Collections\\Expr", "doc": "Namespace Doctrine\\Common\\Collections\\Expr"},
            {"type": "Interface", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Collection.html", "name": "Doctrine\\Common\\Collections\\Collection", "doc": "&quot;The missing (SPL) Collection\/Array\/OrderedMap interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_add", "name": "Doctrine\\Common\\Collections\\Collection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_clear", "name": "Doctrine\\Common\\Collections\\Collection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_contains", "name": "Doctrine\\Common\\Collections\\Collection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\Collection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_remove", "name": "Doctrine\\Common\\Collections\\Collection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\Collection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\Collection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_get", "name": "Doctrine\\Common\\Collections\\Collection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\Collection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\Collection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_set", "name": "Doctrine\\Common\\Collections\\Collection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\Collection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_first", "name": "Doctrine\\Common\\Collections\\Collection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_last", "name": "Doctrine\\Common\\Collections\\Collection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_key", "name": "Doctrine\\Common\\Collections\\Collection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_current", "name": "Doctrine\\Common\\Collections\\Collection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_next", "name": "Doctrine\\Common\\Collections\\Collection::next", "doc": "&quot;Moves the internal iterator position to the next element and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_exists", "name": "Doctrine\\Common\\Collections\\Collection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_filter", "name": "Doctrine\\Common\\Collections\\Collection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\Collection::forAll", "doc": "&quot;Tests whether the given predicate p holds for all elements of this collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_map", "name": "Doctrine\\Common\\Collections\\Collection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_partition", "name": "Doctrine\\Common\\Collections\\Collection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\Collection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_slice", "name": "Doctrine\\Common\\Collections\\Collection::slice", "doc": "&quot;Extracts a slice of $length elements starting at position $offset from the Collection.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/Expression.html", "name": "Doctrine\\Common\\Collections\\Expr\\Expression", "doc": "&quot;Expression for the {@link Selectable} interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Expression", "fromLink": "Doctrine/Common/Collections/Expr/Expression.html", "link": "Doctrine/Common/Collections/Expr/Expression.html#method_visit", "name": "Doctrine\\Common\\Collections\\Expr\\Expression::visit", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Selectable.html", "name": "Doctrine\\Common\\Collections\\Selectable", "doc": "&quot;Interface for collections that allow efficient filtering with an expression API.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Selectable", "fromLink": "Doctrine/Common/Collections/Selectable.html", "link": "Doctrine/Common/Collections/Selectable.html#method_matching", "name": "Doctrine\\Common\\Collections\\Selectable::matching", "doc": "&quot;Selects all elements from a selectable that match the expression and\nreturns a new collection containing these elements.&quot;"},
            
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "doc": "&quot;Lazy collection that is backed by a concrete collection&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_count", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::count", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_add", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_clear", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_contains", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_remove", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_get", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_set", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_first", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_last", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_key", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_current", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_next", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::next", "doc": "&quot;Moves the internal iterator position to the next element and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_exists", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_filter", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::forAll", "doc": "&quot;Tests whether the given predicate p holds for all elements of this collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_map", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_partition", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_slice", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::slice", "doc": "&quot;Extracts a slice of $length elements starting at position $offset from the Collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_getIterator", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::getIterator", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_offsetExists", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetExists", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_offsetGet", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetGet", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_offsetSet", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetSet", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_offsetUnset", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::offsetUnset", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_isInitialized", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::isInitialized", "doc": "&quot;Is the lazy collection already initialized?&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_initialize", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::initialize", "doc": "&quot;Initialize the collection&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\AbstractLazyCollection", "fromLink": "Doctrine/Common/Collections/AbstractLazyCollection.html", "link": "Doctrine/Common/Collections/AbstractLazyCollection.html#method_doInitialize", "name": "Doctrine\\Common\\Collections\\AbstractLazyCollection::doInitialize", "doc": "&quot;Do the initialization logic&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/ArrayCollection.html", "name": "Doctrine\\Common\\Collections\\ArrayCollection", "doc": "&quot;An ArrayCollection is a Collection implementation that wraps a regular PHP array.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method___construct", "name": "Doctrine\\Common\\Collections\\ArrayCollection::__construct", "doc": "&quot;Initializes a new ArrayCollection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\ArrayCollection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_first", "name": "Doctrine\\Common\\Collections\\ArrayCollection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_createFrom", "name": "Doctrine\\Common\\Collections\\ArrayCollection::createFrom", "doc": "&quot;Creates a new instance from the specified elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_last", "name": "Doctrine\\Common\\Collections\\ArrayCollection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_key", "name": "Doctrine\\Common\\Collections\\ArrayCollection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_next", "name": "Doctrine\\Common\\Collections\\ArrayCollection::next", "doc": "&quot;Moves the internal iterator position to the next element and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_current", "name": "Doctrine\\Common\\Collections\\ArrayCollection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_remove", "name": "Doctrine\\Common\\Collections\\ArrayCollection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\ArrayCollection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetExists", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetExists", "doc": "&quot;Required by interface ArrayAccess.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetGet", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetGet", "doc": "&quot;Required by interface ArrayAccess.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetSet", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetSet", "doc": "&quot;Required by interface ArrayAccess.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetUnset", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetUnset", "doc": "&quot;Required by interface ArrayAccess.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\ArrayCollection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_contains", "name": "Doctrine\\Common\\Collections\\ArrayCollection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_exists", "name": "Doctrine\\Common\\Collections\\ArrayCollection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\ArrayCollection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_get", "name": "Doctrine\\Common\\Collections\\ArrayCollection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_count", "name": "Doctrine\\Common\\Collections\\ArrayCollection::count", "doc": "&quot;{@inheritDoc}&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_set", "name": "Doctrine\\Common\\Collections\\ArrayCollection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_add", "name": "Doctrine\\Common\\Collections\\ArrayCollection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\ArrayCollection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getIterator", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getIterator", "doc": "&quot;Required by interface IteratorAggregate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_map", "name": "Doctrine\\Common\\Collections\\ArrayCollection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_filter", "name": "Doctrine\\Common\\Collections\\ArrayCollection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\ArrayCollection::forAll", "doc": "&quot;Tests whether the given predicate p holds for all elements of this collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_partition", "name": "Doctrine\\Common\\Collections\\ArrayCollection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method___toString", "name": "Doctrine\\Common\\Collections\\ArrayCollection::__toString", "doc": "&quot;Returns a string representation of this object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_clear", "name": "Doctrine\\Common\\Collections\\ArrayCollection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_slice", "name": "Doctrine\\Common\\Collections\\ArrayCollection::slice", "doc": "&quot;Extracts a slice of $length elements starting at position $offset from the Collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_matching", "name": "Doctrine\\Common\\Collections\\ArrayCollection::matching", "doc": "&quot;Selects all elements from a selectable that match the expression and\nreturns a new collection containing these elements.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Collection.html", "name": "Doctrine\\Common\\Collections\\Collection", "doc": "&quot;The missing (SPL) Collection\/Array\/OrderedMap interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_add", "name": "Doctrine\\Common\\Collections\\Collection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_clear", "name": "Doctrine\\Common\\Collections\\Collection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_contains", "name": "Doctrine\\Common\\Collections\\Collection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\Collection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_remove", "name": "Doctrine\\Common\\Collections\\Collection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\Collection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\Collection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_get", "name": "Doctrine\\Common\\Collections\\Collection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\Collection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\Collection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_set", "name": "Doctrine\\Common\\Collections\\Collection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\Collection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_first", "name": "Doctrine\\Common\\Collections\\Collection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_last", "name": "Doctrine\\Common\\Collections\\Collection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_key", "name": "Doctrine\\Common\\Collections\\Collection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_current", "name": "Doctrine\\Common\\Collections\\Collection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_next", "name": "Doctrine\\Common\\Collections\\Collection::next", "doc": "&quot;Moves the internal iterator position to the next element and returns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_exists", "name": "Doctrine\\Common\\Collections\\Collection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_filter", "name": "Doctrine\\Common\\Collections\\Collection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\Collection::forAll", "doc": "&quot;Tests whether the given predicate p holds for all elements of this collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_map", "name": "Doctrine\\Common\\Collections\\Collection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_partition", "name": "Doctrine\\Common\\Collections\\Collection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\Collection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_slice", "name": "Doctrine\\Common\\Collections\\Collection::slice", "doc": "&quot;Extracts a slice of $length elements starting at position $offset from the Collection.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Criteria.html", "name": "Doctrine\\Common\\Collections\\Criteria", "doc": "&quot;Criteria for filtering Selectable collections.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_create", "name": "Doctrine\\Common\\Collections\\Criteria::create", "doc": "&quot;Creates an instance of the class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_expr", "name": "Doctrine\\Common\\Collections\\Criteria::expr", "doc": "&quot;Returns the expression builder.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method___construct", "name": "Doctrine\\Common\\Collections\\Criteria::__construct", "doc": "&quot;Construct a new Criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_where", "name": "Doctrine\\Common\\Collections\\Criteria::where", "doc": "&quot;Sets the where expression to evaluate when this Criteria is searched for.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_andWhere", "name": "Doctrine\\Common\\Collections\\Criteria::andWhere", "doc": "&quot;Appends the where expression to evaluate when this Criteria is searched for\nusing an AND with previous expression.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_orWhere", "name": "Doctrine\\Common\\Collections\\Criteria::orWhere", "doc": "&quot;Appends the where expression to evaluate when this Criteria is searched for\nusing an OR with previous expression.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_getWhereExpression", "name": "Doctrine\\Common\\Collections\\Criteria::getWhereExpression", "doc": "&quot;Gets the expression attached to this Criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_getOrderings", "name": "Doctrine\\Common\\Collections\\Criteria::getOrderings", "doc": "&quot;Gets the current orderings of this Criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_orderBy", "name": "Doctrine\\Common\\Collections\\Criteria::orderBy", "doc": "&quot;Sets the ordering of the result of this Criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_getFirstResult", "name": "Doctrine\\Common\\Collections\\Criteria::getFirstResult", "doc": "&quot;Gets the current first result option of this Criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_setFirstResult", "name": "Doctrine\\Common\\Collections\\Criteria::setFirstResult", "doc": "&quot;Set the number of first result that this Criteria should return.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_getMaxResults", "name": "Doctrine\\Common\\Collections\\Criteria::getMaxResults", "doc": "&quot;Gets maxResults.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Criteria", "fromLink": "Doctrine/Common/Collections/Criteria.html", "link": "Doctrine/Common/Collections/Criteria.html#method_setMaxResults", "name": "Doctrine\\Common\\Collections\\Criteria::setMaxResults", "doc": "&quot;Sets maxResults.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "doc": "&quot;Walks an expression graph and turns it into a PHP closure.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html#method_getObjectFieldValue", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor::getObjectFieldValue", "doc": "&quot;Accesses the field of a given object. This field has to be public\ndirectly or indirectly (through an accessor get*, is*, or a magic\nmethod, __get, __call).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html#method_sortByField", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor::sortByField", "doc": "&quot;Helper for sorting arrays of objects based on multiple fields + orientations.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html#method_walkComparison", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor::walkComparison", "doc": "&quot;Converts a comparison expression into the target query language output.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html#method_walkValue", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor::walkValue", "doc": "&quot;Converts a value expression into the target query language part.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ClosureExpressionVisitor.html#method_walkCompositeExpression", "name": "Doctrine\\Common\\Collections\\Expr\\ClosureExpressionVisitor::walkCompositeExpression", "doc": "&quot;Converts a composite expression into the target query language output.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison", "doc": "&quot;Comparison of a field with a value by the given operator.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Comparison", "fromLink": "Doctrine/Common/Collections/Expr/Comparison.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html#method___construct", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Comparison", "fromLink": "Doctrine/Common/Collections/Expr/Comparison.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html#method_getField", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison::getField", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Comparison", "fromLink": "Doctrine/Common/Collections/Expr/Comparison.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html#method_getValue", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison::getValue", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Comparison", "fromLink": "Doctrine/Common/Collections/Expr/Comparison.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html#method_getOperator", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison::getOperator", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Comparison", "fromLink": "Doctrine/Common/Collections/Expr/Comparison.html", "link": "Doctrine/Common/Collections/Expr/Comparison.html#method_visit", "name": "Doctrine\\Common\\Collections\\Expr\\Comparison::visit", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/CompositeExpression.html", "name": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression", "doc": "&quot;Expression of Expressions combined by AND or OR operation.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression", "fromLink": "Doctrine/Common/Collections/Expr/CompositeExpression.html", "link": "Doctrine/Common/Collections/Expr/CompositeExpression.html#method___construct", "name": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression", "fromLink": "Doctrine/Common/Collections/Expr/CompositeExpression.html", "link": "Doctrine/Common/Collections/Expr/CompositeExpression.html#method_getExpressionList", "name": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression::getExpressionList", "doc": "&quot;Returns the list of expressions nested in this composite.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression", "fromLink": "Doctrine/Common/Collections/Expr/CompositeExpression.html", "link": "Doctrine/Common/Collections/Expr/CompositeExpression.html#method_getType", "name": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression::getType", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression", "fromLink": "Doctrine/Common/Collections/Expr/CompositeExpression.html", "link": "Doctrine/Common/Collections/Expr/CompositeExpression.html#method_visit", "name": "Doctrine\\Common\\Collections\\Expr\\CompositeExpression::visit", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/Expression.html", "name": "Doctrine\\Common\\Collections\\Expr\\Expression", "doc": "&quot;Expression for the {@link Selectable} interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Expression", "fromLink": "Doctrine/Common/Collections/Expr/Expression.html", "link": "Doctrine/Common/Collections/Expr/Expression.html#method_visit", "name": "Doctrine\\Common\\Collections\\Expr\\Expression::visit", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html", "name": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor", "doc": "&quot;An Expression visitor walks a graph of expressions and turns them into a\nquery for the underlying implementation.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html#method_walkComparison", "name": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor::walkComparison", "doc": "&quot;Converts a comparison expression into the target query language output.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html#method_walkValue", "name": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor::walkValue", "doc": "&quot;Converts a value expression into the target query language part.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html#method_walkCompositeExpression", "name": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor::walkCompositeExpression", "doc": "&quot;Converts a composite expression into the target query language output.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor", "fromLink": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html", "link": "Doctrine/Common/Collections/Expr/ExpressionVisitor.html#method_dispatch", "name": "Doctrine\\Common\\Collections\\Expr\\ExpressionVisitor::dispatch", "doc": "&quot;Dispatches walking an expression to the appropriate handler.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections\\Expr", "fromLink": "Doctrine/Common/Collections/Expr.html", "link": "Doctrine/Common/Collections/Expr/Value.html", "name": "Doctrine\\Common\\Collections\\Expr\\Value", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Value", "fromLink": "Doctrine/Common/Collections/Expr/Value.html", "link": "Doctrine/Common/Collections/Expr/Value.html#method___construct", "name": "Doctrine\\Common\\Collections\\Expr\\Value::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Value", "fromLink": "Doctrine/Common/Collections/Expr/Value.html", "link": "Doctrine/Common/Collections/Expr/Value.html#method_getValue", "name": "Doctrine\\Common\\Collections\\Expr\\Value::getValue", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Expr\\Value", "fromLink": "Doctrine/Common/Collections/Expr/Value.html", "link": "Doctrine/Common/Collections/Expr/Value.html#method_visit", "name": "Doctrine\\Common\\Collections\\Expr\\Value::visit", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder", "doc": "&quot;Builder for Expressions in the {@link Selectable} interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_andX", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::andX", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_orX", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::orX", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_eq", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::eq", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_gt", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::gt", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_lt", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::lt", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_gte", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::gte", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_lte", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::lte", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_neq", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::neq", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_isNull", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::isNull", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_in", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::in", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_notIn", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::notIn", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_contains", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::contains", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_memberOf", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::memberOf", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_startsWith", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::startsWith", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ExpressionBuilder", "fromLink": "Doctrine/Common/Collections/ExpressionBuilder.html", "link": "Doctrine/Common/Collections/ExpressionBuilder.html#method_endsWith", "name": "Doctrine\\Common\\Collections\\ExpressionBuilder::endsWith", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Selectable.html", "name": "Doctrine\\Common\\Collections\\Selectable", "doc": "&quot;Interface for collections that allow efficient filtering with an expression API.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Selectable", "fromLink": "Doctrine/Common/Collections/Selectable.html", "link": "Doctrine/Common/Collections/Selectable.html#method_matching", "name": "Doctrine\\Common\\Collections\\Selectable::matching", "doc": "&quot;Selects all elements from a selectable that match the expression and\nreturns a new collection containing these elements.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


