
window.projectVersion = '2.2';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:Doctrine" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine.html">Doctrine</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common.html">Common</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Annotations" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Annotations.html">Annotations</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Annotations_Annotation" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Annotations/Annotation.html">Annotation</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Annotations_Annotation_Attribute" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation/Attribute.html">Attribute</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Annotation_Attributes" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation/Attributes.html">Attributes</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Annotation_IgnoreAnnotation" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation/IgnoreAnnotation.html">IgnoreAnnotation</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Annotation_Required" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation/Required.html">Required</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Annotation_Target" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation/Target.html">Target</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Annotation" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Annotation.html">Annotation</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_AnnotationException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/AnnotationException.html">AnnotationException</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_AnnotationReader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/AnnotationReader.html">AnnotationReader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_AnnotationRegistry" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/AnnotationRegistry.html">AnnotationRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_CachedReader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/CachedReader.html">CachedReader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_DocLexer" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/DocLexer.html">DocLexer</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_DocParser" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/DocParser.html">DocParser</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_FileCacheReader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/FileCacheReader.html">FileCacheReader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_IndexedReader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/IndexedReader.html">IndexedReader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_PhpParser" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/PhpParser.html">PhpParser</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_Reader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/Reader.html">Reader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Annotations_SimpleAnnotationReader" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Annotations/SimpleAnnotationReader.html">SimpleAnnotationReader</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Common_Cache" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Cache.html">Cache</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Cache_ApcCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/ApcCache.html">ApcCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_ArrayCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/ArrayCache.html">ArrayCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_Cache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/Cache.html">Cache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_CacheProvider" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/CacheProvider.html">CacheProvider</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_MemcacheCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/MemcacheCache.html">MemcacheCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_MemcachedCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/MemcachedCache.html">MemcachedCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_WincacheCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/WincacheCache.html">WincacheCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_XcacheCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/XcacheCache.html">XcacheCache</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Cache_ZendDataCache" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Cache/ZendDataCache.html">ZendDataCache</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Common_Collections" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Collections.html">Collections</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Collections_ArrayCollection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/ArrayCollection.html">ArrayCollection</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Collections_Collection" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Collections/Collection.html">Collection</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Common_Persistence" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Persistence.html">Persistence</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Persistence_Event" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Persistence/Event.html">Event</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Persistence_Event_LifecycleEventArgs" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Event/LifecycleEventArgs.html">LifecycleEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Event_LoadClassMetadataEventArgs" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html">LoadClassMetadataEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Event_ManagerEventArgs" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Event/ManagerEventArgs.html">ManagerEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Event_OnClearEventArgs" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Event/OnClearEventArgs.html">OnClearEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Event_PreUpdateEventArgs" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html">PreUpdateEventArgs</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Common_Persistence_Mapping" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Persistence/Mapping.html">Mapping</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Common_Persistence_Mapping_Driver" >                    <div style="padding-left:72px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Persistence/Mapping/Driver.html">Driver</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_AnnotationDriver" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html">AnnotationDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_DefaultFileLocator" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html">DefaultFileLocator</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_FileDriver" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html">FileDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_FileLocator" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html">FileLocator</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_MappingDriver" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html">MappingDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_MappingDriverChain" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html">MappingDriverChain</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_PHPDriver" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html">PHPDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_StaticPHPDriver" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html">StaticPHPDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_Driver_SymfonyFileLocator" >                    <div style="padding-left:98px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html">SymfonyFileLocator</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_AbstractClassMetadataFactory" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html">AbstractClassMetadataFactory</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_ClassMetadata" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/ClassMetadata.html">ClassMetadata</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_ClassMetadataFactory" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html">ClassMetadataFactory</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_MappingException" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/MappingException.html">MappingException</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_ReflectionService" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/ReflectionService.html">ReflectionService</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_RuntimeReflectionService" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html">RuntimeReflectionService</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Mapping_StaticReflectionService" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Mapping/StaticReflectionService.html">StaticReflectionService</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_AbstractManagerRegistry" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/AbstractManagerRegistry.html">AbstractManagerRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_ConnectionRegistry" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/ConnectionRegistry.html">ConnectionRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_ManagerRegistry" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/ManagerRegistry.html">ManagerRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_ObjectManager" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/ObjectManager.html">ObjectManager</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_ObjectManagerAware" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/ObjectManagerAware.html">ObjectManagerAware</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_ObjectRepository" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/ObjectRepository.html">ObjectRepository</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_PersistentObject" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/PersistentObject.html">PersistentObject</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Persistence_Proxy" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Persistence/Proxy.html">Proxy</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Common_Util" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Common/Util.html">Util</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Common_Util_ClassUtils" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Util/ClassUtils.html">ClassUtils</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Util_Debug" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Util/Debug.html">Debug</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Util_Inflector" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Common/Util/Inflector.html">Inflector</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Common_ClassLoader" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/ClassLoader.html">ClassLoader</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_CommonException" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/CommonException.html">CommonException</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Comparable" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/Comparable.html">Comparable</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_EventArgs" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/EventArgs.html">EventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_EventManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/EventManager.html">EventManager</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_EventSubscriber" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/EventSubscriber.html">EventSubscriber</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Lexer" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/Lexer.html">Lexer</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_NotifyPropertyChanged" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/NotifyPropertyChanged.html">NotifyPropertyChanged</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_PropertyChangedListener" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/PropertyChangedListener.html">PropertyChangedListener</a>                    </div>                </li>                            <li data-name="class:Doctrine_Common_Version" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Common/Version.html">Version</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "Doctrine.html", "name": "Doctrine", "doc": "Namespace Doctrine"},{"type": "Namespace", "link": "Doctrine/Common.html", "name": "Doctrine\\Common", "doc": "Namespace Doctrine\\Common"},{"type": "Namespace", "link": "Doctrine/Common/Annotations.html", "name": "Doctrine\\Common\\Annotations", "doc": "Namespace Doctrine\\Common\\Annotations"},{"type": "Namespace", "link": "Doctrine/Common/Annotations/Annotation.html", "name": "Doctrine\\Common\\Annotations\\Annotation", "doc": "Namespace Doctrine\\Common\\Annotations\\Annotation"},{"type": "Namespace", "link": "Doctrine/Common/Cache.html", "name": "Doctrine\\Common\\Cache", "doc": "Namespace Doctrine\\Common\\Cache"},{"type": "Namespace", "link": "Doctrine/Common/Collections.html", "name": "Doctrine\\Common\\Collections", "doc": "Namespace Doctrine\\Common\\Collections"},{"type": "Namespace", "link": "Doctrine/Common/Persistence.html", "name": "Doctrine\\Common\\Persistence", "doc": "Namespace Doctrine\\Common\\Persistence"},{"type": "Namespace", "link": "Doctrine/Common/Persistence/Event.html", "name": "Doctrine\\Common\\Persistence\\Event", "doc": "Namespace Doctrine\\Common\\Persistence\\Event"},{"type": "Namespace", "link": "Doctrine/Common/Persistence/Mapping.html", "name": "Doctrine\\Common\\Persistence\\Mapping", "doc": "Namespace Doctrine\\Common\\Persistence\\Mapping"},{"type": "Namespace", "link": "Doctrine/Common/Persistence/Mapping/Driver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "doc": "Namespace Doctrine\\Common\\Persistence\\Mapping\\Driver"},{"type": "Namespace", "link": "Doctrine/Common/Util.html", "name": "Doctrine\\Common\\Util", "doc": "Namespace Doctrine\\Common\\Util"},
            {"type": "Interface", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/Reader.html", "name": "Doctrine\\Common\\Annotations\\Reader", "doc": "&quot;Interface for annotation readers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getClassAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getClassAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation", "doc": "&quot;&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/Cache.html", "name": "Doctrine\\Common\\Cache\\Cache", "doc": "&quot;Interface for cache drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_fetch", "name": "Doctrine\\Common\\Cache\\Cache::fetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_contains", "name": "Doctrine\\Common\\Cache\\Cache::contains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_save", "name": "Doctrine\\Common\\Cache\\Cache::save", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_delete", "name": "Doctrine\\Common\\Cache\\Cache::delete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_getStats", "name": "Doctrine\\Common\\Cache\\Cache::getStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Collection.html", "name": "Doctrine\\Common\\Collections\\Collection", "doc": "&quot;The missing (SPL) Collection\/Array\/OrderedMap interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_add", "name": "Doctrine\\Common\\Collections\\Collection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_clear", "name": "Doctrine\\Common\\Collections\\Collection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_contains", "name": "Doctrine\\Common\\Collections\\Collection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\Collection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_remove", "name": "Doctrine\\Common\\Collections\\Collection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\Collection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\Collection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_get", "name": "Doctrine\\Common\\Collections\\Collection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\Collection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\Collection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_set", "name": "Doctrine\\Common\\Collections\\Collection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\Collection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_first", "name": "Doctrine\\Common\\Collections\\Collection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_last", "name": "Doctrine\\Common\\Collections\\Collection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_key", "name": "Doctrine\\Common\\Collections\\Collection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_current", "name": "Doctrine\\Common\\Collections\\Collection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_next", "name": "Doctrine\\Common\\Collections\\Collection::next", "doc": "&quot;Moves the internal iterator position to the next element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_exists", "name": "Doctrine\\Common\\Collections\\Collection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_filter", "name": "Doctrine\\Common\\Collections\\Collection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\Collection::forAll", "doc": "&quot;Applies the given predicate p to all elements of this collection,\nreturning true, if the predicate yields true for all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_map", "name": "Doctrine\\Common\\Collections\\Collection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_partition", "name": "Doctrine\\Common\\Collections\\Collection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\Collection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_slice", "name": "Doctrine\\Common\\Collections\\Collection::slice", "doc": "&quot;Extract a slice of $length elements starting at position $offset from the Collection.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/Comparable.html", "name": "Doctrine\\Common\\Comparable", "doc": "&quot;Comparable interface that allows to compare two value objects to each other for similarity.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Comparable", "fromLink": "Doctrine/Common/Comparable.html", "link": "Doctrine/Common/Comparable.html#method_compareTo", "name": "Doctrine\\Common\\Comparable::compareTo", "doc": "&quot;Compare the current object to the passed $other.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/EventSubscriber.html", "name": "Doctrine\\Common\\EventSubscriber", "doc": "&quot;An EventSubscriber knows himself what events he is interested in.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\EventSubscriber", "fromLink": "Doctrine/Common/EventSubscriber.html", "link": "Doctrine/Common/EventSubscriber.html#method_getSubscribedEvents", "name": "Doctrine\\Common\\EventSubscriber::getSubscribedEvents", "doc": "&quot;Returns an array of events this subscriber wants to listen to.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/NotifyPropertyChanged.html", "name": "Doctrine\\Common\\NotifyPropertyChanged", "doc": "&quot;Contract for classes that provide the service of notifying listeners of\nchanges to their properties.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\NotifyPropertyChanged", "fromLink": "Doctrine/Common/NotifyPropertyChanged.html", "link": "Doctrine/Common/NotifyPropertyChanged.html#method_addPropertyChangedListener", "name": "Doctrine\\Common\\NotifyPropertyChanged::addPropertyChangedListener", "doc": "&quot;Adds a listener that wants to be notified about property changes.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "doc": "&quot;Contract covering connection for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getDefaultConnectionName", "doc": "&quot;Gets the default connection name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnection", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnection", "doc": "&quot;Gets the named connection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnections", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnections", "doc": "&quot;Gets an array of all registered connections&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnectionNames", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnectionNames", "doc": "&quot;Gets all connection names.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry", "doc": "&quot;Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getDefaultManagerName", "doc": "&quot;Gets the default object manager name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManager", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManager", "doc": "&quot;Gets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagers", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagers", "doc": "&quot;Gets an array of all registered object managers&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_resetManager", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::resetManager", "doc": "&quot;Resets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getAliasNamespace", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getAliasNamespace", "doc": "&quot;Resolves a registered namespace alias to the full namespace.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagerNames", "doc": "&quot;Gets all connection names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getRepository", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getRepository", "doc": "&quot;Gets the ObjectRepository for an persistent object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagerForClass", "doc": "&quot;Gets the object manager associated with a given class.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getName", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getName", "doc": "&quot;Get fully-qualified class name of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifier", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifier", "doc": "&quot;Gets the mapped identifier field name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getReflectionClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getReflectionClass", "doc": "&quot;Gets the ReflectionClass instance for this mapped class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isIdentifier", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isIdentifier", "doc": "&quot;Checks if the given field name is a mapped identifier for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_hasField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::hasField", "doc": "&quot;Checks if the given field is a mapped property for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_hasAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::hasAssociation", "doc": "&quot;Checks if the given field is a mapped association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isSingleValuedAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isSingleValuedAssociation", "doc": "&quot;Checks if the given field is a mapped single valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isCollectionValuedAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isCollectionValuedAssociation", "doc": "&quot;Checks if the given field is a mapped collection valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getFieldNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getFieldNames", "doc": "&quot;A numerically indexed list of field names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifierFieldNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifierFieldNames", "doc": "&quot;Returns an array of identifier field names numerically indexed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationNames", "doc": "&quot;A numerically indexed list of association names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getTypeOfField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getTypeOfField", "doc": "&quot;Returns a type name of this field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationTargetClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationTargetClass", "doc": "&quot;Returns the target class name of the given association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isAssociationInverseSide", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isAssociationInverseSide", "doc": "&quot;Checks if the association is the inverse side of a bidirectional association&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationMappedByTargetField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationMappedByTargetField", "doc": "&quot;Returns the target field of the owning side of the association&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifierValues", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifierValues", "doc": "&quot;Return the identifier of this object as an array with field name as key.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "doc": "&quot;Locate the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_findMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::findMappingFile", "doc": "&quot;Locate mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getAllClassNames", "doc": "&quot;Get all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_fileExists", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::fileExists", "doc": "&quot;Check if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getPaths", "doc": "&quot;Get all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getFileExtension", "doc": "&quot;Get the file extension that mapping files are suffixed with.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "doc": "&quot;Contract for metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "doc": "&quot;Very simple reflection service abstraction.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getParentClasses", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getParentClasses", "doc": "&quot;Return an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClassShortName", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClassShortName", "doc": "&quot;Return the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClass", "doc": "&quot;Return a reflection class instance or null&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getAccessibleProperty", "doc": "&quot;Return an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::hasPublicMethod", "doc": "&quot;Check if the class have a public method with the given name.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectManager.html", "name": "Doctrine\\Common\\Persistence\\ObjectManager", "doc": "&quot;Contract for a Doctrine persistence layer ObjectManager class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_find", "name": "Doctrine\\Common\\Persistence\\ObjectManager::find", "doc": "&quot;Finds a object by its identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_persist", "name": "Doctrine\\Common\\Persistence\\ObjectManager::persist", "doc": "&quot;Tells the ObjectManager to make an instance managed and persistent.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_remove", "name": "Doctrine\\Common\\Persistence\\ObjectManager::remove", "doc": "&quot;Removes an object instance.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_merge", "name": "Doctrine\\Common\\Persistence\\ObjectManager::merge", "doc": "&quot;Merges the state of a detached object into the persistence context\nof this ObjectManager and returns the managed copy of the object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_detach", "name": "Doctrine\\Common\\Persistence\\ObjectManager::detach", "doc": "&quot;Detaches an object from the ObjectManager, causing a managed object to\nbecome detached. Unflushed changes made to the object if any\n(including removal of the object), will not be synchronized to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_refresh", "name": "Doctrine\\Common\\Persistence\\ObjectManager::refresh", "doc": "&quot;Refreshes the persistent state of an object from the database,\noverriding any local changes that have not yet been persisted.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_flush", "name": "Doctrine\\Common\\Persistence\\ObjectManager::flush", "doc": "&quot;Flushes all changes to objects that have been queued up to now to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getRepository", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getRepository", "doc": "&quot;Gets the repository for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getClassMetadata", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getClassMetadata", "doc": "&quot;Returns the ClassMetadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getMetadataFactory", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getMetadataFactory", "doc": "&quot;Gets the metadata factory used to gather the metadata of classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_initializeObject", "name": "Doctrine\\Common\\Persistence\\ObjectManager::initializeObject", "doc": "&quot;Helper method to initialize a lazy loading proxy or persistent collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_contains", "name": "Doctrine\\Common\\Persistence\\ObjectManager::contains", "doc": "&quot;Check if the object is part of the current UnitOfWork and therefore\nmanaged.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectManagerAware.html", "name": "Doctrine\\Common\\Persistence\\ObjectManagerAware", "doc": "&quot;Makes a Persistent Objects aware of its own object-manager.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManagerAware", "fromLink": "Doctrine/Common/Persistence/ObjectManagerAware.html", "link": "Doctrine/Common/Persistence/ObjectManagerAware.html#method_injectObjectManager", "name": "Doctrine\\Common\\Persistence\\ObjectManagerAware::injectObjectManager", "doc": "&quot;Injects responsible ObjectManager and the ClassMetadata into this persistent object.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html", "name": "Doctrine\\Common\\Persistence\\ObjectRepository", "doc": "&quot;Contract for a Doctrine persistence layer ObjectRepository class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_find", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::find", "doc": "&quot;Finds an object by its primary key \/ identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findAll", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findAll", "doc": "&quot;Finds all objects in the repository.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findBy", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findBy", "doc": "&quot;Finds objects by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findOneBy", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findOneBy", "doc": "&quot;Finds a single object by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_getClassName", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::getClassName", "doc": "&quot;Returns the class name of the object managed by the repository&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/Proxy.html", "name": "Doctrine\\Common\\Persistence\\Proxy", "doc": "&quot;Interface for proxy classes.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Proxy", "fromLink": "Doctrine/Common/Persistence/Proxy.html", "link": "Doctrine/Common/Persistence/Proxy.html#method___load", "name": "Doctrine\\Common\\Persistence\\Proxy::__load", "doc": "&quot;Initialize this proxy if its not yet initialized.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Proxy", "fromLink": "Doctrine/Common/Persistence/Proxy.html", "link": "Doctrine/Common/Persistence/Proxy.html#method___isInitialized", "name": "Doctrine\\Common\\Persistence\\Proxy::__isInitialized", "doc": "&quot;Is this proxy initialized or not.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/PropertyChangedListener.html", "name": "Doctrine\\Common\\PropertyChangedListener", "doc": "&quot;Contract for classes that are potential listeners of a &lt;tt&gt;NotifyPropertyChanged&lt;\/tt&gt;\nimplementor.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\PropertyChangedListener", "fromLink": "Doctrine/Common/PropertyChangedListener.html", "link": "Doctrine/Common/PropertyChangedListener.html#method_propertyChanged", "name": "Doctrine\\Common\\PropertyChangedListener::propertyChanged", "doc": "&quot;Notifies the listener of a property change.&quot;"},
            
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/Annotation.html", "name": "Doctrine\\Common\\Annotations\\Annotation", "doc": "&quot;Annotations class&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation.html#method___construct", "name": "Doctrine\\Common\\Annotations\\Annotation::__construct", "doc": "&quot;Constructor&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation.html#method___get", "name": "Doctrine\\Common\\Annotations\\Annotation::__get", "doc": "&quot;Error handler for unknown property accessor in Annotation class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation.html#method___set", "name": "Doctrine\\Common\\Annotations\\Annotation::__set", "doc": "&quot;Error handler for unknown property mutator in Annotation class.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/AnnotationException.html", "name": "Doctrine\\Common\\Annotations\\AnnotationException", "doc": "&quot;Description of AnnotationException&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationException", "fromLink": "Doctrine/Common/Annotations/AnnotationException.html", "link": "Doctrine/Common/Annotations/AnnotationException.html#method_syntaxError", "name": "Doctrine\\Common\\Annotations\\AnnotationException::syntaxError", "doc": "&quot;Creates a new AnnotationException describing a Syntax error.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationException", "fromLink": "Doctrine/Common/Annotations/AnnotationException.html", "link": "Doctrine/Common/Annotations/AnnotationException.html#method_semanticalError", "name": "Doctrine\\Common\\Annotations\\AnnotationException::semanticalError", "doc": "&quot;Creates a new AnnotationException describing a Semantical error.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationException", "fromLink": "Doctrine/Common/Annotations/AnnotationException.html", "link": "Doctrine/Common/Annotations/AnnotationException.html#method_creationError", "name": "Doctrine\\Common\\Annotations\\AnnotationException::creationError", "doc": "&quot;Creates a new AnnotationException describing an error which occurred during\nthe creation of the annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationException", "fromLink": "Doctrine/Common/Annotations/AnnotationException.html", "link": "Doctrine/Common/Annotations/AnnotationException.html#method_typeError", "name": "Doctrine\\Common\\Annotations\\AnnotationException::typeError", "doc": "&quot;Creates a new AnnotationException describing an type error of an attribute.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationException", "fromLink": "Doctrine/Common/Annotations/AnnotationException.html", "link": "Doctrine/Common/Annotations/AnnotationException.html#method_requiredError", "name": "Doctrine\\Common\\Annotations\\AnnotationException::requiredError", "doc": "&quot;Creates a new AnnotationException describing an required error of an attribute.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html", "name": "Doctrine\\Common\\Annotations\\AnnotationReader", "doc": "&quot;A reader for docblock annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_addGlobalIgnoredName", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::addGlobalIgnoredName", "doc": "&quot;Add a new annotation to the globally ignored annotation names with regard to exception handling.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method___construct", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getClassAnnotations", "doc": "&quot;Gets the annotations applied to a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getClassAnnotation", "doc": "&quot;Gets a class annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getPropertyAnnotations", "doc": "&quot;Gets the annotations applied to a property.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getPropertyAnnotation", "doc": "&quot;Gets a property annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getMethodAnnotations", "doc": "&quot;Gets the annotations applied to a method.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationReader", "fromLink": "Doctrine/Common/Annotations/AnnotationReader.html", "link": "Doctrine/Common/Annotations/AnnotationReader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\AnnotationReader::getMethodAnnotation", "doc": "&quot;Gets a method annotation.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "doc": "&quot;&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_reset", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::reset", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_registerFile", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::registerFile", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_registerAutoloadNamespace", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::registerAutoloadNamespace", "doc": "&quot;Add a namespace with one or many directories to look for files or null for the include path.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_registerAutoloadNamespaces", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::registerAutoloadNamespaces", "doc": "&quot;Register multiple namespaces&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_registerLoader", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::registerLoader", "doc": "&quot;Register an autoloading callabale for annotations, much like spl_autoload_register().&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\AnnotationRegistry", "fromLink": "Doctrine/Common/Annotations/AnnotationRegistry.html", "link": "Doctrine/Common/Annotations/AnnotationRegistry.html#method_loadAnnotationClass", "name": "Doctrine\\Common\\Annotations\\AnnotationRegistry::loadAnnotationClass", "doc": "&quot;Autoload an annotation class silently.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation/Attribute.html", "name": "Doctrine\\Common\\Annotations\\Annotation\\Attribute", "doc": "&quot;Annotation that can be used to signal to the parser\nto check the attribute type during the parsing process.&quot;"},
                    
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation/Attributes.html", "name": "Doctrine\\Common\\Annotations\\Annotation\\Attributes", "doc": "&quot;Annotation that can be used to signal to the parser\nto check the types of all declared attributes during the parsing process.&quot;"},
                    
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation/IgnoreAnnotation.html", "name": "Doctrine\\Common\\Annotations\\Annotation\\IgnoreAnnotation", "doc": "&quot;Annotation that can be used to signal to the parser to ignore specific\nannotations during the parsing process.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Annotation\\IgnoreAnnotation", "fromLink": "Doctrine/Common/Annotations/Annotation/IgnoreAnnotation.html", "link": "Doctrine/Common/Annotations/Annotation/IgnoreAnnotation.html#method___construct", "name": "Doctrine\\Common\\Annotations\\Annotation\\IgnoreAnnotation::__construct", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation/Required.html", "name": "Doctrine\\Common\\Annotations\\Annotation\\Required", "doc": "&quot;Annotation that can be used to signal to the parser\nto check if that attribute is required during the parsing process.&quot;"},
                    
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations\\Annotation", "fromLink": "Doctrine/Common/Annotations/Annotation.html", "link": "Doctrine/Common/Annotations/Annotation/Target.html", "name": "Doctrine\\Common\\Annotations\\Annotation\\Target", "doc": "&quot;Annotation that can be used to signal to the parser\nto check the annotation target during the parsing process.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Annotation\\Target", "fromLink": "Doctrine/Common/Annotations/Annotation/Target.html", "link": "Doctrine/Common/Annotations/Annotation/Target.html#method___construct", "name": "Doctrine\\Common\\Annotations\\Annotation\\Target::__construct", "doc": "&quot;Annotation construct&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/CachedReader.html", "name": "Doctrine\\Common\\Annotations\\CachedReader", "doc": "&quot;A cache aware annotation reader.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method___construct", "name": "Doctrine\\Common\\Annotations\\CachedReader::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\CachedReader::getClassAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\CachedReader::getClassAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\CachedReader::getPropertyAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\CachedReader::getPropertyAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\CachedReader::getMethodAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\CachedReader::getMethodAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\CachedReader", "fromLink": "Doctrine/Common/Annotations/CachedReader.html", "link": "Doctrine/Common/Annotations/CachedReader.html#method_clearLoadedAnnotations", "name": "Doctrine\\Common\\Annotations\\CachedReader::clearLoadedAnnotations", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/DocLexer.html", "name": "Doctrine\\Common\\Annotations\\DocLexer", "doc": "&quot;Simple lexer for docblock annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocLexer", "fromLink": "Doctrine/Common/Annotations/DocLexer.html", "link": "Doctrine/Common/Annotations/DocLexer.html#method_getCatchablePatterns", "name": "Doctrine\\Common\\Annotations\\DocLexer::getCatchablePatterns", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocLexer", "fromLink": "Doctrine/Common/Annotations/DocLexer.html", "link": "Doctrine/Common/Annotations/DocLexer.html#method_getNonCatchablePatterns", "name": "Doctrine\\Common\\Annotations\\DocLexer::getNonCatchablePatterns", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocLexer", "fromLink": "Doctrine/Common/Annotations/DocLexer.html", "link": "Doctrine/Common/Annotations/DocLexer.html#method_getType", "name": "Doctrine\\Common\\Annotations\\DocLexer::getType", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/DocParser.html", "name": "Doctrine\\Common\\Annotations\\DocParser", "doc": "&quot;A parser for docblock annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method___construct", "name": "Doctrine\\Common\\Annotations\\DocParser::__construct", "doc": "&quot;Constructs a new DocParser.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_setIgnoredAnnotationNames", "name": "Doctrine\\Common\\Annotations\\DocParser::setIgnoredAnnotationNames", "doc": "&quot;Sets the annotation names that are ignored during the parsing process.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_setIgnoreNotImportedAnnotations", "name": "Doctrine\\Common\\Annotations\\DocParser::setIgnoreNotImportedAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_addNamespace", "name": "Doctrine\\Common\\Annotations\\DocParser::addNamespace", "doc": "&quot;Sets the default namespaces.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_setImports", "name": "Doctrine\\Common\\Annotations\\DocParser::setImports", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_setTarget", "name": "Doctrine\\Common\\Annotations\\DocParser::setTarget", "doc": "&quot;Sets current target context as bitmask.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\DocParser", "fromLink": "Doctrine/Common/Annotations/DocParser.html", "link": "Doctrine/Common/Annotations/DocParser.html#method_parse", "name": "Doctrine\\Common\\Annotations\\DocParser::parse", "doc": "&quot;Parses the given docblock string for annotations.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html", "name": "Doctrine\\Common\\Annotations\\FileCacheReader", "doc": "&quot;File cache reader for annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method___construct", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getClassAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getPropertyAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getMethodAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getClassAnnotation", "doc": "&quot;Gets a class annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getMethodAnnotation", "doc": "&quot;Gets a method annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::getPropertyAnnotation", "doc": "&quot;Gets a property annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\FileCacheReader", "fromLink": "Doctrine/Common/Annotations/FileCacheReader.html", "link": "Doctrine/Common/Annotations/FileCacheReader.html#method_clearLoadedAnnotations", "name": "Doctrine\\Common\\Annotations\\FileCacheReader::clearLoadedAnnotations", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/IndexedReader.html", "name": "Doctrine\\Common\\Annotations\\IndexedReader", "doc": "&quot;Allows the reader to be used in-place of Doctrine&#039;s reader.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method___construct", "name": "Doctrine\\Common\\Annotations\\IndexedReader::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getClassAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getClassAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getMethodAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getMethodAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getPropertyAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\IndexedReader::getPropertyAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\IndexedReader", "fromLink": "Doctrine/Common/Annotations/IndexedReader.html", "link": "Doctrine/Common/Annotations/IndexedReader.html#method___call", "name": "Doctrine\\Common\\Annotations\\IndexedReader::__call", "doc": "&quot;Proxy all methods to the delegate.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/PhpParser.html", "name": "Doctrine\\Common\\Annotations\\PhpParser", "doc": "&quot;Parses a file for namespaces\/use\/class declarations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\PhpParser", "fromLink": "Doctrine/Common/Annotations/PhpParser.html", "link": "Doctrine/Common/Annotations/PhpParser.html#method_parseClass", "name": "Doctrine\\Common\\Annotations\\PhpParser::parseClass", "doc": "&quot;Parses a class.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/Reader.html", "name": "Doctrine\\Common\\Annotations\\Reader", "doc": "&quot;Interface for annotation readers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getClassAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getClassAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\Reader", "fromLink": "Doctrine/Common/Annotations/Reader.html", "link": "Doctrine/Common/Annotations/Reader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Annotations", "fromLink": "Doctrine/Common/Annotations.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "doc": "&quot;Simple Annotation Reader.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method___construct", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_addNamespace", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::addNamespace", "doc": "&quot;Adds a namespace in which we will look for annotations.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getClassAnnotations", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getClassAnnotations", "doc": "&quot;Gets the annotations applied to a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getMethodAnnotations", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getMethodAnnotations", "doc": "&quot;Gets the annotations applied to a method.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getPropertyAnnotations", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getPropertyAnnotations", "doc": "&quot;Gets the annotations applied to a property.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getClassAnnotation", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getClassAnnotation", "doc": "&quot;Gets a class annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getMethodAnnotation", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getMethodAnnotation", "doc": "&quot;Gets a method annotation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader", "fromLink": "Doctrine/Common/Annotations/SimpleAnnotationReader.html", "link": "Doctrine/Common/Annotations/SimpleAnnotationReader.html#method_getPropertyAnnotation", "name": "Doctrine\\Common\\Annotations\\SimpleAnnotationReader::getPropertyAnnotation", "doc": "&quot;Gets a property annotation.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/ApcCache.html", "name": "Doctrine\\Common\\Cache\\ApcCache", "doc": "&quot;APC cache provider.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\ApcCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\ApcCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\ApcCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\ApcCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\ApcCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ApcCache", "fromLink": "Doctrine/Common/Cache/ApcCache.html", "link": "Doctrine/Common/Cache/ApcCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\ApcCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/ArrayCache.html", "name": "Doctrine\\Common\\Cache\\ArrayCache", "doc": "&quot;Array cache driver.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\ArrayCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\ArrayCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\ArrayCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\ArrayCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\ArrayCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ArrayCache", "fromLink": "Doctrine/Common/Cache/ArrayCache.html", "link": "Doctrine/Common/Cache/ArrayCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\ArrayCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/Cache.html", "name": "Doctrine\\Common\\Cache\\Cache", "doc": "&quot;Interface for cache drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_fetch", "name": "Doctrine\\Common\\Cache\\Cache::fetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_contains", "name": "Doctrine\\Common\\Cache\\Cache::contains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_save", "name": "Doctrine\\Common\\Cache\\Cache::save", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_delete", "name": "Doctrine\\Common\\Cache\\Cache::delete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\Cache", "fromLink": "Doctrine/Common/Cache/Cache.html", "link": "Doctrine/Common/Cache/Cache.html#method_getStats", "name": "Doctrine\\Common\\Cache\\Cache::getStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/CacheProvider.html", "name": "Doctrine\\Common\\Cache\\CacheProvider", "doc": "&quot;Base class for cache provider implementations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_setNamespace", "name": "Doctrine\\Common\\Cache\\CacheProvider::setNamespace", "doc": "&quot;Set the namespace to prefix all cache ids with.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_getNamespace", "name": "Doctrine\\Common\\Cache\\CacheProvider::getNamespace", "doc": "&quot;Retrieve the namespace that prefixes all cache ids.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_fetch", "name": "Doctrine\\Common\\Cache\\CacheProvider::fetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_contains", "name": "Doctrine\\Common\\Cache\\CacheProvider::contains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_save", "name": "Doctrine\\Common\\Cache\\CacheProvider::save", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_delete", "name": "Doctrine\\Common\\Cache\\CacheProvider::delete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_getStats", "name": "Doctrine\\Common\\Cache\\CacheProvider::getStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_flushAll", "name": "Doctrine\\Common\\Cache\\CacheProvider::flushAll", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_deleteAll", "name": "Doctrine\\Common\\Cache\\CacheProvider::deleteAll", "doc": "&quot;Delete all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\CacheProvider::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doContains", "name": "Doctrine\\Common\\Cache\\CacheProvider::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doSave", "name": "Doctrine\\Common\\Cache\\CacheProvider::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\CacheProvider::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\CacheProvider::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\CacheProvider", "fromLink": "Doctrine/Common/Cache/CacheProvider.html", "link": "Doctrine/Common/Cache/CacheProvider.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\CacheProvider::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html", "name": "Doctrine\\Common\\Cache\\MemcacheCache", "doc": "&quot;Memcache cache provider.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_setMemcache", "name": "Doctrine\\Common\\Cache\\MemcacheCache::setMemcache", "doc": "&quot;Sets the memcache instance to use.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_getMemcache", "name": "Doctrine\\Common\\Cache\\MemcacheCache::getMemcache", "doc": "&quot;Gets the memcache instance used by the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcacheCache", "fromLink": "Doctrine/Common/Cache/MemcacheCache.html", "link": "Doctrine/Common/Cache/MemcacheCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\MemcacheCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html", "name": "Doctrine\\Common\\Cache\\MemcachedCache", "doc": "&quot;Memcached cache provider.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_setMemcached", "name": "Doctrine\\Common\\Cache\\MemcachedCache::setMemcached", "doc": "&quot;Sets the memcache instance to use.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_getMemcached", "name": "Doctrine\\Common\\Cache\\MemcachedCache::getMemcached", "doc": "&quot;Gets the memcached instance used by the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\MemcachedCache", "fromLink": "Doctrine/Common/Cache/MemcachedCache.html", "link": "Doctrine/Common/Cache/MemcachedCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\MemcachedCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/WincacheCache.html", "name": "Doctrine\\Common\\Cache\\WincacheCache", "doc": "&quot;WinCache cache provider.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\WincacheCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\WincacheCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\WincacheCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\WincacheCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\WincacheCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\WincacheCache", "fromLink": "Doctrine/Common/Cache/WincacheCache.html", "link": "Doctrine/Common/Cache/WincacheCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\WincacheCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/XcacheCache.html", "name": "Doctrine\\Common\\Cache\\XcacheCache", "doc": "&quot;Xcache cache driver.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\XcacheCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\XcacheCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\XcacheCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\XcacheCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\XcacheCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_checkAuthorization", "name": "Doctrine\\Common\\Cache\\XcacheCache::checkAuthorization", "doc": "&quot;Checks that xcache.admin.enable_auth is Off&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\XcacheCache", "fromLink": "Doctrine/Common/Cache/XcacheCache.html", "link": "Doctrine/Common/Cache/XcacheCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\XcacheCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Cache", "fromLink": "Doctrine/Common/Cache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html", "name": "Doctrine\\Common\\Cache\\ZendDataCache", "doc": "&quot;Zend Data Cache cache driver.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doFetch", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doFetch", "doc": "&quot;Fetches an entry from the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doContains", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doContains", "doc": "&quot;Test if an entry exists in the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doSave", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doSave", "doc": "&quot;Puts data into the cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doDelete", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doDelete", "doc": "&quot;Deletes a cache entry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doFlush", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doFlush", "doc": "&quot;Deletes all cache entries.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Cache\\ZendDataCache", "fromLink": "Doctrine/Common/Cache/ZendDataCache.html", "link": "Doctrine/Common/Cache/ZendDataCache.html#method_doGetStats", "name": "Doctrine\\Common\\Cache\\ZendDataCache::doGetStats", "doc": "&quot;Retrieves cached information from data store&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/ClassLoader.html", "name": "Doctrine\\Common\\ClassLoader", "doc": "&quot;A &lt;tt&gt;ClassLoader&lt;\/tt&gt; is an autoloader for class files that can be\ninstalled on the SPL autoload stack. It is a class loader that either loads only classes\nof a specific namespace or all namespaces and it is suitable for working together\nwith other autoloaders in the SPL autoload stack.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method___construct", "name": "Doctrine\\Common\\ClassLoader::__construct", "doc": "&quot;Creates a new &lt;tt&gt;ClassLoader&lt;\/tt&gt; that loads classes of the\nspecified namespace from the specified include path.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_setNamespaceSeparator", "name": "Doctrine\\Common\\ClassLoader::setNamespaceSeparator", "doc": "&quot;Sets the namespace separator used by classes in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_getNamespaceSeparator", "name": "Doctrine\\Common\\ClassLoader::getNamespaceSeparator", "doc": "&quot;Gets the namespace separator used by classes in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_setIncludePath", "name": "Doctrine\\Common\\ClassLoader::setIncludePath", "doc": "&quot;Sets the base include path for all class files in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_getIncludePath", "name": "Doctrine\\Common\\ClassLoader::getIncludePath", "doc": "&quot;Gets the base include path for all class files in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_setFileExtension", "name": "Doctrine\\Common\\ClassLoader::setFileExtension", "doc": "&quot;Sets the file extension of class files in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_getFileExtension", "name": "Doctrine\\Common\\ClassLoader::getFileExtension", "doc": "&quot;Gets the file extension of class files in the namespace of this ClassLoader.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_register", "name": "Doctrine\\Common\\ClassLoader::register", "doc": "&quot;Registers this ClassLoader on the SPL autoload stack.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_unregister", "name": "Doctrine\\Common\\ClassLoader::unregister", "doc": "&quot;Removes this ClassLoader from the SPL autoload stack.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_loadClass", "name": "Doctrine\\Common\\ClassLoader::loadClass", "doc": "&quot;Loads the given class or interface.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_canLoadClass", "name": "Doctrine\\Common\\ClassLoader::canLoadClass", "doc": "&quot;Asks this ClassLoader whether it can potentially load the class (file) with\nthe given name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_classExists", "name": "Doctrine\\Common\\ClassLoader::classExists", "doc": "&quot;Checks whether a class with a given name exists. A class \&quot;exists\&quot; if it is either\nalready defined in the current request or if there is an autoloader on the SPL\nautoload stack that is a) responsible for the class in question and b) is able to\nload a class file in which the class definition resides.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\ClassLoader", "fromLink": "Doctrine/Common/ClassLoader.html", "link": "Doctrine/Common/ClassLoader.html#method_getClassLoader", "name": "Doctrine\\Common\\ClassLoader::getClassLoader", "doc": "&quot;Gets the &lt;tt&gt;ClassLoader&lt;\/tt&gt; from the SPL autoload stack that is responsible\nfor (and is able to load) the class with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/ArrayCollection.html", "name": "Doctrine\\Common\\Collections\\ArrayCollection", "doc": "&quot;An ArrayCollection is a Collection implementation that wraps a regular PHP array.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method___construct", "name": "Doctrine\\Common\\Collections\\ArrayCollection::__construct", "doc": "&quot;Initializes a new ArrayCollection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\ArrayCollection::toArray", "doc": "&quot;Gets the PHP array representation of this collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_first", "name": "Doctrine\\Common\\Collections\\ArrayCollection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_last", "name": "Doctrine\\Common\\Collections\\ArrayCollection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_key", "name": "Doctrine\\Common\\Collections\\ArrayCollection::key", "doc": "&quot;Gets the current key\/index at the current internal iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_next", "name": "Doctrine\\Common\\Collections\\ArrayCollection::next", "doc": "&quot;Moves the internal iterator position to the next element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_current", "name": "Doctrine\\Common\\Collections\\ArrayCollection::current", "doc": "&quot;Gets the element of the collection at the current internal iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_remove", "name": "Doctrine\\Common\\Collections\\ArrayCollection::remove", "doc": "&quot;Removes an element with a specific key\/index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\ArrayCollection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetExists", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetExists", "doc": "&quot;ArrayAccess implementation of offsetExists()&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetGet", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetGet", "doc": "&quot;ArrayAccess implementation of offsetGet()&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetSet", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetSet", "doc": "&quot;ArrayAccess implementation of offsetGet()&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_offsetUnset", "name": "Doctrine\\Common\\Collections\\ArrayCollection::offsetUnset", "doc": "&quot;ArrayAccess implementation of offsetUnset()&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\ArrayCollection::containsKey", "doc": "&quot;Checks whether the collection contains a specific key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_contains", "name": "Doctrine\\Common\\Collections\\ArrayCollection::contains", "doc": "&quot;Checks whether the given element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_exists", "name": "Doctrine\\Common\\Collections\\ArrayCollection::exists", "doc": "&quot;Tests for the existance of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\ArrayCollection::indexOf", "doc": "&quot;Searches for a given element and, if found, returns the corresponding key\/index\nof that element. The comparison of two elements is strict, that means not\nonly the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_get", "name": "Doctrine\\Common\\Collections\\ArrayCollection::get", "doc": "&quot;Gets the element with the given key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getKeys", "doc": "&quot;Gets all keys\/indexes of the collection elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getValues", "doc": "&quot;Gets all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_count", "name": "Doctrine\\Common\\Collections\\ArrayCollection::count", "doc": "&quot;Returns the number of elements in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_set", "name": "Doctrine\\Common\\Collections\\ArrayCollection::set", "doc": "&quot;Adds\/sets an element in the collection at the index \/ with the specified key.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_add", "name": "Doctrine\\Common\\Collections\\ArrayCollection::add", "doc": "&quot;Adds an element to the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\ArrayCollection::isEmpty", "doc": "&quot;Checks whether the collection is empty.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_getIterator", "name": "Doctrine\\Common\\Collections\\ArrayCollection::getIterator", "doc": "&quot;Gets an iterator for iterating over the elements in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_map", "name": "Doctrine\\Common\\Collections\\ArrayCollection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_filter", "name": "Doctrine\\Common\\Collections\\ArrayCollection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\ArrayCollection::forAll", "doc": "&quot;Applies the given predicate p to all elements of this collection,\nreturning true, if the predicate yields true for all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_partition", "name": "Doctrine\\Common\\Collections\\ArrayCollection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method___toString", "name": "Doctrine\\Common\\Collections\\ArrayCollection::__toString", "doc": "&quot;Returns a string representation of this object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_clear", "name": "Doctrine\\Common\\Collections\\ArrayCollection::clear", "doc": "&quot;Clears the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\ArrayCollection", "fromLink": "Doctrine/Common/Collections/ArrayCollection.html", "link": "Doctrine/Common/Collections/ArrayCollection.html#method_slice", "name": "Doctrine\\Common\\Collections\\ArrayCollection::slice", "doc": "&quot;Extract a slice of $length elements starting at position $offset from the Collection.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Collections", "fromLink": "Doctrine/Common/Collections.html", "link": "Doctrine/Common/Collections/Collection.html", "name": "Doctrine\\Common\\Collections\\Collection", "doc": "&quot;The missing (SPL) Collection\/Array\/OrderedMap interface.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_add", "name": "Doctrine\\Common\\Collections\\Collection::add", "doc": "&quot;Adds an element at the end of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_clear", "name": "Doctrine\\Common\\Collections\\Collection::clear", "doc": "&quot;Clears the collection, removing all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_contains", "name": "Doctrine\\Common\\Collections\\Collection::contains", "doc": "&quot;Checks whether an element is contained in the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_isEmpty", "name": "Doctrine\\Common\\Collections\\Collection::isEmpty", "doc": "&quot;Checks whether the collection is empty (contains no elements).&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_remove", "name": "Doctrine\\Common\\Collections\\Collection::remove", "doc": "&quot;Removes the element at the specified index from the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_removeElement", "name": "Doctrine\\Common\\Collections\\Collection::removeElement", "doc": "&quot;Removes the specified element from the collection, if it is found.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_containsKey", "name": "Doctrine\\Common\\Collections\\Collection::containsKey", "doc": "&quot;Checks whether the collection contains an element with the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_get", "name": "Doctrine\\Common\\Collections\\Collection::get", "doc": "&quot;Gets the element at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getKeys", "name": "Doctrine\\Common\\Collections\\Collection::getKeys", "doc": "&quot;Gets all keys\/indices of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_getValues", "name": "Doctrine\\Common\\Collections\\Collection::getValues", "doc": "&quot;Gets all values of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_set", "name": "Doctrine\\Common\\Collections\\Collection::set", "doc": "&quot;Sets an element in the collection at the specified key\/index.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_toArray", "name": "Doctrine\\Common\\Collections\\Collection::toArray", "doc": "&quot;Gets a native PHP array representation of the collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_first", "name": "Doctrine\\Common\\Collections\\Collection::first", "doc": "&quot;Sets the internal iterator to the first element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_last", "name": "Doctrine\\Common\\Collections\\Collection::last", "doc": "&quot;Sets the internal iterator to the last element in the collection and\nreturns this element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_key", "name": "Doctrine\\Common\\Collections\\Collection::key", "doc": "&quot;Gets the key\/index of the element at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_current", "name": "Doctrine\\Common\\Collections\\Collection::current", "doc": "&quot;Gets the element of the collection at the current iterator position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_next", "name": "Doctrine\\Common\\Collections\\Collection::next", "doc": "&quot;Moves the internal iterator position to the next element.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_exists", "name": "Doctrine\\Common\\Collections\\Collection::exists", "doc": "&quot;Tests for the existence of an element that satisfies the given predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_filter", "name": "Doctrine\\Common\\Collections\\Collection::filter", "doc": "&quot;Returns all the elements of this collection that satisfy the predicate p.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_forAll", "name": "Doctrine\\Common\\Collections\\Collection::forAll", "doc": "&quot;Applies the given predicate p to all elements of this collection,\nreturning true, if the predicate yields true for all elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_map", "name": "Doctrine\\Common\\Collections\\Collection::map", "doc": "&quot;Applies the given function to each element in the collection and returns\na new collection with the elements returned by the function.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_partition", "name": "Doctrine\\Common\\Collections\\Collection::partition", "doc": "&quot;Partitions this collection in two collections according to a predicate.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_indexOf", "name": "Doctrine\\Common\\Collections\\Collection::indexOf", "doc": "&quot;Gets the index\/key of a given element. The comparison of two elements is strict,\nthat means not only the value but also the type must match.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Collections\\Collection", "fromLink": "Doctrine/Common/Collections/Collection.html", "link": "Doctrine/Common/Collections/Collection.html#method_slice", "name": "Doctrine\\Common\\Collections\\Collection::slice", "doc": "&quot;Extract a slice of $length elements starting at position $offset from the Collection.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/CommonException.html", "name": "Doctrine\\Common\\CommonException", "doc": "&quot;Base exception class for package Doctrine\\Common&quot;"},
                    
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/Comparable.html", "name": "Doctrine\\Common\\Comparable", "doc": "&quot;Comparable interface that allows to compare two value objects to each other for similarity.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Comparable", "fromLink": "Doctrine/Common/Comparable.html", "link": "Doctrine/Common/Comparable.html#method_compareTo", "name": "Doctrine\\Common\\Comparable::compareTo", "doc": "&quot;Compare the current object to the passed $other.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/EventArgs.html", "name": "Doctrine\\Common\\EventArgs", "doc": "&quot;EventArgs is the base class for classes containing event data.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\EventArgs", "fromLink": "Doctrine/Common/EventArgs.html", "link": "Doctrine/Common/EventArgs.html#method_getEmptyInstance", "name": "Doctrine\\Common\\EventArgs::getEmptyInstance", "doc": "&quot;Gets the single, empty and immutable EventArgs instance.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/EventManager.html", "name": "Doctrine\\Common\\EventManager", "doc": "&quot;The EventManager is the central point of Doctrine&#039;s event listener system.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_dispatchEvent", "name": "Doctrine\\Common\\EventManager::dispatchEvent", "doc": "&quot;Dispatches an event to all registered listeners.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_getListeners", "name": "Doctrine\\Common\\EventManager::getListeners", "doc": "&quot;Gets the listeners of a specific event or all listeners.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_hasListeners", "name": "Doctrine\\Common\\EventManager::hasListeners", "doc": "&quot;Checks whether an event has any registered listeners.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_addEventListener", "name": "Doctrine\\Common\\EventManager::addEventListener", "doc": "&quot;Adds an event listener that listens on the specified events.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_removeEventListener", "name": "Doctrine\\Common\\EventManager::removeEventListener", "doc": "&quot;Removes an event listener from the specified events.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\EventManager", "fromLink": "Doctrine/Common/EventManager.html", "link": "Doctrine/Common/EventManager.html#method_addEventSubscriber", "name": "Doctrine\\Common\\EventManager::addEventSubscriber", "doc": "&quot;Adds an EventSubscriber. The subscriber is asked for all the events he is\ninterested in and added as a listener for these events.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/EventSubscriber.html", "name": "Doctrine\\Common\\EventSubscriber", "doc": "&quot;An EventSubscriber knows himself what events he is interested in.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\EventSubscriber", "fromLink": "Doctrine/Common/EventSubscriber.html", "link": "Doctrine/Common/EventSubscriber.html#method_getSubscribedEvents", "name": "Doctrine\\Common\\EventSubscriber::getSubscribedEvents", "doc": "&quot;Returns an array of events this subscriber wants to listen to.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/Lexer.html", "name": "Doctrine\\Common\\Lexer", "doc": "&quot;Base class for writing simple lexers, i.e. for creating small DSLs.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_setInput", "name": "Doctrine\\Common\\Lexer::setInput", "doc": "&quot;Sets the input data to be tokenized.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_reset", "name": "Doctrine\\Common\\Lexer::reset", "doc": "&quot;Resets the lexer.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_resetPeek", "name": "Doctrine\\Common\\Lexer::resetPeek", "doc": "&quot;Resets the peek pointer to 0.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_resetPosition", "name": "Doctrine\\Common\\Lexer::resetPosition", "doc": "&quot;Resets the lexer position on the input to the given position.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_isNextToken", "name": "Doctrine\\Common\\Lexer::isNextToken", "doc": "&quot;Checks whether a given token matches the current lookahead.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_isNextTokenAny", "name": "Doctrine\\Common\\Lexer::isNextTokenAny", "doc": "&quot;Checks whether any of the given tokens matches the current lookahead&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_moveNext", "name": "Doctrine\\Common\\Lexer::moveNext", "doc": "&quot;Moves to the next token in the input string.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_skipUntil", "name": "Doctrine\\Common\\Lexer::skipUntil", "doc": "&quot;Tells the lexer to skip input tokens until it sees a token with the given value.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_isA", "name": "Doctrine\\Common\\Lexer::isA", "doc": "&quot;Checks if given value is identical to the given token&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_peek", "name": "Doctrine\\Common\\Lexer::peek", "doc": "&quot;Moves the lookahead token forward.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_glimpse", "name": "Doctrine\\Common\\Lexer::glimpse", "doc": "&quot;Peeks at the next token, returns it and immediately resets the peek.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_scan", "name": "Doctrine\\Common\\Lexer::scan", "doc": "&quot;Scans the input string for tokens.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_getLiteral", "name": "Doctrine\\Common\\Lexer::getLiteral", "doc": "&quot;Gets the literal for a given token.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_getCatchablePatterns", "name": "Doctrine\\Common\\Lexer::getCatchablePatterns", "doc": "&quot;Lexical catchable patterns.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_getNonCatchablePatterns", "name": "Doctrine\\Common\\Lexer::getNonCatchablePatterns", "doc": "&quot;Lexical non-catchable patterns.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Lexer", "fromLink": "Doctrine/Common/Lexer.html", "link": "Doctrine/Common/Lexer.html#method_getType", "name": "Doctrine\\Common\\Lexer::getType", "doc": "&quot;Retrieve token type. Also processes the token value if necessary.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/NotifyPropertyChanged.html", "name": "Doctrine\\Common\\NotifyPropertyChanged", "doc": "&quot;Contract for classes that provide the service of notifying listeners of\nchanges to their properties.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\NotifyPropertyChanged", "fromLink": "Doctrine/Common/NotifyPropertyChanged.html", "link": "Doctrine/Common/NotifyPropertyChanged.html#method_addPropertyChangedListener", "name": "Doctrine\\Common\\NotifyPropertyChanged::addPropertyChangedListener", "doc": "&quot;Adds a listener that wants to be notified about property changes.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "doc": "&quot;Abstract implementation of the ManagerRegistry contract.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method___construct", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getService", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getService", "doc": "&quot;Fetches\/creates the given services&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_resetService", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::resetService", "doc": "&quot;Resets the given services&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getName", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getName", "doc": "&quot;Get the name of the registry&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getConnection", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getConnection", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getConnectionNames", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getConnectionNames", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getConnections", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getConnections", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getDefaultConnectionName", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getDefaultManagerName", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getManager", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getManager", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getManagerForClass", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getManagerNames", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getManagers", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getManagers", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_getRepository", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::getRepository", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Common/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Common/Persistence/AbstractManagerRegistry.html#method_resetManager", "name": "Doctrine\\Common\\Persistence\\AbstractManagerRegistry::resetManager", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "doc": "&quot;Contract covering connection for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getDefaultConnectionName", "doc": "&quot;Gets the default connection name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnection", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnection", "doc": "&quot;Gets the named connection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnections", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnections", "doc": "&quot;Gets an array of all registered connections&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Common/Persistence/ConnectionRegistry.html", "link": "Doctrine/Common/Persistence/ConnectionRegistry.html#method_getConnectionNames", "name": "Doctrine\\Common\\Persistence\\ConnectionRegistry::getConnectionNames", "doc": "&quot;Gets all connection names.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Event", "fromLink": "Doctrine/Common/Persistence/Event.html", "link": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html", "name": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs", "doc": "&quot;Lifecycle Events are triggered by the UnitOfWork during lifecycle transitions\nof entities.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs::__construct", "doc": "&quot;Constructor&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html#method_getEntity", "name": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs::getEntity", "doc": "&quot;Retireve associated Entity.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LifecycleEventArgs.html#method_getObjectManager", "name": "Doctrine\\Common\\Persistence\\Event\\LifecycleEventArgs::getObjectManager", "doc": "&quot;Retrieve associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Event", "fromLink": "Doctrine/Common/Persistence/Event.html", "link": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html", "name": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs", "doc": "&quot;Class that holds event arguments for a loadMetadata event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html#method_getClassMetadata", "name": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs::getClassMetadata", "doc": "&quot;Retrieve associated ClassMetadata.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Common/Persistence/Event/LoadClassMetadataEventArgs.html#method_getObjectManager", "name": "Doctrine\\Common\\Persistence\\Event\\LoadClassMetadataEventArgs::getObjectManager", "doc": "&quot;Retrieve associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Event", "fromLink": "Doctrine/Common/Persistence/Event.html", "link": "Doctrine/Common/Persistence/Event/ManagerEventArgs.html", "name": "Doctrine\\Common\\Persistence\\Event\\ManagerEventArgs", "doc": "&quot;Provides event arguments for the preFlush event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\ManagerEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/ManagerEventArgs.html", "link": "Doctrine/Common/Persistence/Event/ManagerEventArgs.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Event\\ManagerEventArgs::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\ManagerEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/ManagerEventArgs.html", "link": "Doctrine/Common/Persistence/Event/ManagerEventArgs.html#method_getObjectManager", "name": "Doctrine\\Common\\Persistence\\Event\\ManagerEventArgs::getObjectManager", "doc": "&quot;Retrieve associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Event", "fromLink": "Doctrine/Common/Persistence/Event.html", "link": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html", "name": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs", "doc": "&quot;Provides event arguments for the onClear event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html#method_getObjectManager", "name": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs::getObjectManager", "doc": "&quot;Retrieve associated ObjectManager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html#method_getEntityClass", "name": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs::getEntityClass", "doc": "&quot;Name of the entity class that is cleared, or empty if all are cleared.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Common/Persistence/Event/OnClearEventArgs.html#method_clearsAllEntities", "name": "Doctrine\\Common\\Persistence\\Event\\OnClearEventArgs::clearsAllEntities", "doc": "&quot;Check if event clears all entities.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Event", "fromLink": "Doctrine/Common/Persistence/Event.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "doc": "&quot;Class that holds event arguments for a preUpdate event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::__construct", "doc": "&quot;Constructor.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method_getEntityChangeSet", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::getEntityChangeSet", "doc": "&quot;Retrieve entity changeset.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method_hasChangedField", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::hasChangedField", "doc": "&quot;Check if field has a changeset.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method_getOldValue", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::getOldValue", "doc": "&quot;Get the old value of the changeset of the changed field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method_getNewValue", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::getNewValue", "doc": "&quot;Get the new value of the changeset of the changed field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Common/Persistence/Event/PreUpdateEventArgs.html#method_setNewValue", "name": "Doctrine\\Common\\Persistence\\Event\\PreUpdateEventArgs::setNewValue", "doc": "&quot;Set the new value of this field.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry", "doc": "&quot;Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getDefaultManagerName", "doc": "&quot;Gets the default object manager name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManager", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManager", "doc": "&quot;Gets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagers", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagers", "doc": "&quot;Gets an array of all registered object managers&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_resetManager", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::resetManager", "doc": "&quot;Resets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getAliasNamespace", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getAliasNamespace", "doc": "&quot;Resolves a registered namespace alias to the full namespace.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagerNames", "doc": "&quot;Gets all connection names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getRepository", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getRepository", "doc": "&quot;Gets the ObjectRepository for an persistent object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Common/Persistence/ManagerRegistry.html", "link": "Doctrine/Common/Persistence/ManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Common\\Persistence\\ManagerRegistry::getManagerForClass", "doc": "&quot;Gets the object manager associated with a given class.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "doc": "&quot;The ClassMetadataFactory is used to create ClassMetadata objects that contain all the\nmetadata mapping informations of a class which describes how a class should be mapped\nto a relational database.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setCacheDriver", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::setCacheDriver", "doc": "&quot;Sets the cache driver used by the factory to cache ClassMetadata instances.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getCacheDriver", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getCacheDriver", "doc": "&quot;Gets the cache driver used by the factory to cache ClassMetadata instances.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getLoadedMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getLoadedMetadata", "doc": "&quot;Return an array of all the loaded metadata currently in memory.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_initialize", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::initialize", "doc": "&quot;Lazy initialization of this stuff, especially the metadata driver,\nsince these are not needed at all when a metadata cache is active.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getFqcnFromAlias", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getFqcnFromAlias", "doc": "&quot;Get the fully qualified class-name from the namespace alias.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getDriver", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getDriver", "doc": "&quot;Return the mapping driver implementation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_wakeupReflection", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::wakeupReflection", "doc": "&quot;Wakeup reflection after ClassMetadata gets unserialized from cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_initializeReflection", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::initializeReflection", "doc": "&quot;Initialize Reflection after ClassMetadata was constructed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getParentClasses", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getParentClasses", "doc": "&quot;Get array of parent classes for the given entity class&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_loadMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::loadMetadata", "doc": "&quot;Loads the metadata of the class in question and all it&#039;s ancestors whose metadata\nis still not loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_doLoadMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::doLoadMetadata", "doc": "&quot;Actually load the metadata from the underlying metadata&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_newClassMetadataInstance", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::newClassMetadataInstance", "doc": "&quot;Creates a new ClassMetadata instance for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::isTransient", "doc": "&quot;Check if this class is mapped by this Object Manager + ClassMetadata configuration&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setReflectionService", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::setReflectionService", "doc": "&quot;Set reflectionService.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getReflectionService", "name": "Doctrine\\Common\\Persistence\\Mapping\\AbstractClassMetadataFactory::getReflectionService", "doc": "&quot;Get the reflection service associated with this metadata factory.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getName", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getName", "doc": "&quot;Get fully-qualified class name of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifier", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifier", "doc": "&quot;Gets the mapped identifier field name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getReflectionClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getReflectionClass", "doc": "&quot;Gets the ReflectionClass instance for this mapped class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isIdentifier", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isIdentifier", "doc": "&quot;Checks if the given field name is a mapped identifier for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_hasField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::hasField", "doc": "&quot;Checks if the given field is a mapped property for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_hasAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::hasAssociation", "doc": "&quot;Checks if the given field is a mapped association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isSingleValuedAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isSingleValuedAssociation", "doc": "&quot;Checks if the given field is a mapped single valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isCollectionValuedAssociation", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isCollectionValuedAssociation", "doc": "&quot;Checks if the given field is a mapped collection valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getFieldNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getFieldNames", "doc": "&quot;A numerically indexed list of field names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifierFieldNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifierFieldNames", "doc": "&quot;Returns an array of identifier field names numerically indexed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationNames", "doc": "&quot;A numerically indexed list of association names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getTypeOfField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getTypeOfField", "doc": "&quot;Returns a type name of this field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationTargetClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationTargetClass", "doc": "&quot;Returns the target class name of the given association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_isAssociationInverseSide", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::isAssociationInverseSide", "doc": "&quot;Checks if the association is the inverse side of a bidirectional association&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getAssociationMappedByTargetField", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getAssociationMappedByTargetField", "doc": "&quot;Returns the target field of the owning side of the association&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadata.html#method_getIdentifierValues", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata::getIdentifierValues", "doc": "&quot;Return the identifier of this object as an array with field name as key.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Common/Persistence/Mapping/ClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\ClassMetadataFactory::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "doc": "&quot;The AnnotationDriver reads the mapping metadata from docblock annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::__construct", "doc": "&quot;Initializes a new AnnotationDriver that uses the given AnnotationReader for reading\ndocblock annotations.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_addPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::addPaths", "doc": "&quot;Append lookup paths to metadata driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_getPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::getPaths", "doc": "&quot;Retrieve the defined metadata lookup paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_getReader", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::getReader", "doc": "&quot;Retrieve the current annotation reader&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_getFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::getFileExtension", "doc": "&quot;Get the file extension used to look for mapping files under&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_setFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::setFileExtension", "doc": "&quot;Set the file extension used to look for mapping files under&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::isTransient", "doc": "&quot;Whether the class with the specified name is transient. Only non-transient\nclasses, that is entities and mapped superclasses, should have their metadata loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "doc": "&quot;Locate the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_addPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::addPaths", "doc": "&quot;Append lookup paths to metadata driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getPaths", "doc": "&quot;Retrieve the defined metadata lookup paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getFileExtension", "doc": "&quot;Get the file extension used to look for mapping files under&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_setFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::setFileExtension", "doc": "&quot;Set the file extension used to look for mapping files under&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_findMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::findMappingFile", "doc": "&quot;Locate mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getAllClassNames", "doc": "&quot;Get all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/DefaultFileLocator.html#method_fileExists", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\DefaultFileLocator::fileExists", "doc": "&quot;Check if a file can be found for this class name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "doc": "&quot;Base driver for file-based metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_setGlobalBasename", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::setGlobalBasename", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_getGlobalBasename", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::getGlobalBasename", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_getElement", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::getElement", "doc": "&quot;Get the element of schema meta data for the class from the mapping file.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_loadMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::loadMappingFile", "doc": "&quot;Loads a mapping file with the given name and returns a map\nfrom class\/entity names to their corresponding file driver elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileDriver.html#method_initialize", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileDriver::initialize", "doc": "&quot;Initialize the class cache from all the global files.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "doc": "&quot;Locate the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_findMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::findMappingFile", "doc": "&quot;Locate mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getAllClassNames", "doc": "&quot;Get all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_fileExists", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::fileExists", "doc": "&quot;Check if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getPaths", "doc": "&quot;Get all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/FileLocator.html#method_getFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\FileLocator::getFileExtension", "doc": "&quot;Get the file extension that mapping files are suffixed with.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "doc": "&quot;Contract for metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "doc": "&quot;The DriverChain allows you to add multiple other mapping drivers for\ncertain namespaces&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html#method_addDriver", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain::addDriver", "doc": "&quot;Add a nested driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html#method_getDrivers", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain::getDrivers", "doc": "&quot;Get the array of nested drivers.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html#method_loadMetadataForClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver", "doc": "&quot;The PHPDriver includes php files which just populate ClassMetadataInfo\ninstances with plain php code&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/PHPDriver.html#method_loadMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\PHPDriver::loadMappingFile", "doc": "&quot;Loads a mapping file with the given name and returns a map\nfrom class\/entity names to their corresponding file driver elements.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "doc": "&quot;The StaticPHPDriver calls a static loadMetadata() method on your entity\nclasses where you can manually populate the ClassMetadata instance.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html#method_addPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver::addPaths", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/StaticPHPDriver.html#method_isTransient", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\StaticPHPDriver::isTransient", "doc": "&quot;Whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "doc": "&quot;The Symfony File Locator makes a simplifying assumptions compared\nto the DefaultFileLocator. By assuming paths only contain entities of a certain\nnamespace the mapping files consists of the short classname only.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method___construct", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_addNamespacePrefixes", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::addNamespacePrefixes", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getNamespacePrefixes", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getNamespacePrefixes", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getPaths", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getPaths", "doc": "&quot;Get all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getFileExtension", "doc": "&quot;Get the file extension that mapping files are suffixed with.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_setFileExtension", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::setFileExtension", "doc": "&quot;Set the file extension used to look for mapping files under&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_fileExists", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::fileExists", "doc": "&quot;Check if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getAllClassNames", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getAllClassNames", "doc": "&quot;Get all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Common/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_findMappingFile", "name": "Doctrine\\Common\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::findMappingFile", "doc": "&quot;Locate mapping file for the given class name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/MappingException.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\MappingException", "doc": "&quot;A MappingException indicates that something is wrong with the mapping setup.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Common/Persistence/Mapping/MappingException.html", "link": "Doctrine/Common/Persistence/Mapping/MappingException.html#method_classNotFoundInNamespaces", "name": "Doctrine\\Common\\Persistence\\Mapping\\MappingException::classNotFoundInNamespaces", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Common/Persistence/Mapping/MappingException.html", "link": "Doctrine/Common/Persistence/Mapping/MappingException.html#method_pathRequired", "name": "Doctrine\\Common\\Persistence\\Mapping\\MappingException::pathRequired", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Common/Persistence/Mapping/MappingException.html", "link": "Doctrine/Common/Persistence/Mapping/MappingException.html#method_fileMappingDriversRequireConfiguredDirectoryPath", "name": "Doctrine\\Common\\Persistence\\Mapping\\MappingException::fileMappingDriversRequireConfiguredDirectoryPath", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Common/Persistence/Mapping/MappingException.html", "link": "Doctrine/Common/Persistence/Mapping/MappingException.html#method_mappingFileNotFound", "name": "Doctrine\\Common\\Persistence\\Mapping\\MappingException::mappingFileNotFound", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "doc": "&quot;Very simple reflection service abstraction.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getParentClasses", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getParentClasses", "doc": "&quot;Return an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClassShortName", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClassShortName", "doc": "&quot;Return the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getClass", "doc": "&quot;Return a reflection class instance or null&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::getAccessibleProperty", "doc": "&quot;Return an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/ReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Common\\Persistence\\Mapping\\ReflectionService::hasPublicMethod", "doc": "&quot;Check if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "doc": "&quot;PHP Runtime Reflection Service&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_getParentClasses", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::getParentClasses", "doc": "&quot;Return an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_getClassShortName", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::getClassShortName", "doc": "&quot;Return the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_getClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::getClass", "doc": "&quot;Return a reflection class instance or null&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::getAccessibleProperty", "doc": "&quot;Return an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Common\\Persistence\\Mapping\\RuntimeReflectionService::hasPublicMethod", "doc": "&quot;Check if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence\\Mapping", "fromLink": "Doctrine/Common/Persistence/Mapping.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "doc": "&quot;PHP Runtime Reflection Service&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_getParentClasses", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::getParentClasses", "doc": "&quot;Return an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_getClassShortName", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::getClassShortName", "doc": "&quot;Return the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::getClassNamespace", "doc": "&quot;Return the namespace of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_getClass", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::getClass", "doc": "&quot;Return a reflection class instance or null&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::getAccessibleProperty", "doc": "&quot;Return an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Common/Persistence/Mapping/StaticReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Common\\Persistence\\Mapping\\StaticReflectionService::hasPublicMethod", "doc": "&quot;Check if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectManager.html", "name": "Doctrine\\Common\\Persistence\\ObjectManager", "doc": "&quot;Contract for a Doctrine persistence layer ObjectManager class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_find", "name": "Doctrine\\Common\\Persistence\\ObjectManager::find", "doc": "&quot;Finds a object by its identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_persist", "name": "Doctrine\\Common\\Persistence\\ObjectManager::persist", "doc": "&quot;Tells the ObjectManager to make an instance managed and persistent.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_remove", "name": "Doctrine\\Common\\Persistence\\ObjectManager::remove", "doc": "&quot;Removes an object instance.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_merge", "name": "Doctrine\\Common\\Persistence\\ObjectManager::merge", "doc": "&quot;Merges the state of a detached object into the persistence context\nof this ObjectManager and returns the managed copy of the object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_detach", "name": "Doctrine\\Common\\Persistence\\ObjectManager::detach", "doc": "&quot;Detaches an object from the ObjectManager, causing a managed object to\nbecome detached. Unflushed changes made to the object if any\n(including removal of the object), will not be synchronized to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_refresh", "name": "Doctrine\\Common\\Persistence\\ObjectManager::refresh", "doc": "&quot;Refreshes the persistent state of an object from the database,\noverriding any local changes that have not yet been persisted.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_flush", "name": "Doctrine\\Common\\Persistence\\ObjectManager::flush", "doc": "&quot;Flushes all changes to objects that have been queued up to now to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getRepository", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getRepository", "doc": "&quot;Gets the repository for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getClassMetadata", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getClassMetadata", "doc": "&quot;Returns the ClassMetadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_getMetadataFactory", "name": "Doctrine\\Common\\Persistence\\ObjectManager::getMetadataFactory", "doc": "&quot;Gets the metadata factory used to gather the metadata of classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_initializeObject", "name": "Doctrine\\Common\\Persistence\\ObjectManager::initializeObject", "doc": "&quot;Helper method to initialize a lazy loading proxy or persistent collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManager", "fromLink": "Doctrine/Common/Persistence/ObjectManager.html", "link": "Doctrine/Common/Persistence/ObjectManager.html#method_contains", "name": "Doctrine\\Common\\Persistence\\ObjectManager::contains", "doc": "&quot;Check if the object is part of the current UnitOfWork and therefore\nmanaged.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectManagerAware.html", "name": "Doctrine\\Common\\Persistence\\ObjectManagerAware", "doc": "&quot;Makes a Persistent Objects aware of its own object-manager.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectManagerAware", "fromLink": "Doctrine/Common/Persistence/ObjectManagerAware.html", "link": "Doctrine/Common/Persistence/ObjectManagerAware.html#method_injectObjectManager", "name": "Doctrine\\Common\\Persistence\\ObjectManagerAware::injectObjectManager", "doc": "&quot;Injects responsible ObjectManager and the ClassMetadata into this persistent object.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html", "name": "Doctrine\\Common\\Persistence\\ObjectRepository", "doc": "&quot;Contract for a Doctrine persistence layer ObjectRepository class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_find", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::find", "doc": "&quot;Finds an object by its primary key \/ identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findAll", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findAll", "doc": "&quot;Finds all objects in the repository.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findBy", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findBy", "doc": "&quot;Finds objects by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_findOneBy", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::findOneBy", "doc": "&quot;Finds a single object by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Common/Persistence/ObjectRepository.html", "link": "Doctrine/Common/Persistence/ObjectRepository.html#method_getClassName", "name": "Doctrine\\Common\\Persistence\\ObjectRepository::getClassName", "doc": "&quot;Returns the class name of the object managed by the repository&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/PersistentObject.html", "name": "Doctrine\\Common\\Persistence\\PersistentObject", "doc": "&quot;PersistentObject base class that implements getter\/setter methods for all mapped fields and associations\nby overriding __call.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\PersistentObject", "fromLink": "Doctrine/Common/Persistence/PersistentObject.html", "link": "Doctrine/Common/Persistence/PersistentObject.html#method_setObjectManager", "name": "Doctrine\\Common\\Persistence\\PersistentObject::setObjectManager", "doc": "&quot;Set the object manager responsible for all persistent object base classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\PersistentObject", "fromLink": "Doctrine/Common/Persistence/PersistentObject.html", "link": "Doctrine/Common/Persistence/PersistentObject.html#method_getObjectManager", "name": "Doctrine\\Common\\Persistence\\PersistentObject::getObjectManager", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\PersistentObject", "fromLink": "Doctrine/Common/Persistence/PersistentObject.html", "link": "Doctrine/Common/Persistence/PersistentObject.html#method_injectObjectManager", "name": "Doctrine\\Common\\Persistence\\PersistentObject::injectObjectManager", "doc": "&quot;Inject Doctrine Object Manager&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\PersistentObject", "fromLink": "Doctrine/Common/Persistence/PersistentObject.html", "link": "Doctrine/Common/Persistence/PersistentObject.html#method___call", "name": "Doctrine\\Common\\Persistence\\PersistentObject::__call", "doc": "&quot;Magic method that implements&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Persistence", "fromLink": "Doctrine/Common/Persistence.html", "link": "Doctrine/Common/Persistence/Proxy.html", "name": "Doctrine\\Common\\Persistence\\Proxy", "doc": "&quot;Interface for proxy classes.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Proxy", "fromLink": "Doctrine/Common/Persistence/Proxy.html", "link": "Doctrine/Common/Persistence/Proxy.html#method___load", "name": "Doctrine\\Common\\Persistence\\Proxy::__load", "doc": "&quot;Initialize this proxy if its not yet initialized.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Persistence\\Proxy", "fromLink": "Doctrine/Common/Persistence/Proxy.html", "link": "Doctrine/Common/Persistence/Proxy.html#method___isInitialized", "name": "Doctrine\\Common\\Persistence\\Proxy::__isInitialized", "doc": "&quot;Is this proxy initialized or not.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/PropertyChangedListener.html", "name": "Doctrine\\Common\\PropertyChangedListener", "doc": "&quot;Contract for classes that are potential listeners of a &lt;tt&gt;NotifyPropertyChanged&lt;\/tt&gt;\nimplementor.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\PropertyChangedListener", "fromLink": "Doctrine/Common/PropertyChangedListener.html", "link": "Doctrine/Common/PropertyChangedListener.html#method_propertyChanged", "name": "Doctrine\\Common\\PropertyChangedListener::propertyChanged", "doc": "&quot;Notifies the listener of a property change.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Util", "fromLink": "Doctrine/Common/Util.html", "link": "Doctrine/Common/Util/ClassUtils.html", "name": "Doctrine\\Common\\Util\\ClassUtils", "doc": "&quot;Class and reflection related functionality for objects that\nmight or not be proxy objects at the moment.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_getRealClass", "name": "Doctrine\\Common\\Util\\ClassUtils::getRealClass", "doc": "&quot;Get the real class name of a class name that could be a proxy.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_getClass", "name": "Doctrine\\Common\\Util\\ClassUtils::getClass", "doc": "&quot;Get the real class name of an object (even if its a proxy)&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_getParentClass", "name": "Doctrine\\Common\\Util\\ClassUtils::getParentClass", "doc": "&quot;Get the real parent class name of a class or object&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_newReflectionClass", "name": "Doctrine\\Common\\Util\\ClassUtils::newReflectionClass", "doc": "&quot;Create a new reflection class&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_newReflectionObject", "name": "Doctrine\\Common\\Util\\ClassUtils::newReflectionObject", "doc": "&quot;Create a new reflection object&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\ClassUtils", "fromLink": "Doctrine/Common/Util/ClassUtils.html", "link": "Doctrine/Common/Util/ClassUtils.html#method_generateProxyClassName", "name": "Doctrine\\Common\\Util\\ClassUtils::generateProxyClassName", "doc": "&quot;Given a class name and a proxy namespace return the proxy name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Util", "fromLink": "Doctrine/Common/Util.html", "link": "Doctrine/Common/Util/Debug.html", "name": "Doctrine\\Common\\Util\\Debug", "doc": "&quot;Static class containing most used debug methods.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Debug", "fromLink": "Doctrine/Common/Util/Debug.html", "link": "Doctrine/Common/Util/Debug.html#method_dump", "name": "Doctrine\\Common\\Util\\Debug::dump", "doc": "&quot;Prints a dump of the public, protected and private properties of $var.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Debug", "fromLink": "Doctrine/Common/Util/Debug.html", "link": "Doctrine/Common/Util/Debug.html#method_export", "name": "Doctrine\\Common\\Util\\Debug::export", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Debug", "fromLink": "Doctrine/Common/Util/Debug.html", "link": "Doctrine/Common/Util/Debug.html#method_toString", "name": "Doctrine\\Common\\Util\\Debug::toString", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common\\Util", "fromLink": "Doctrine/Common/Util.html", "link": "Doctrine/Common/Util/Inflector.html", "name": "Doctrine\\Common\\Util\\Inflector", "doc": "&quot;Doctrine inflector has static methods for inflecting text&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Inflector", "fromLink": "Doctrine/Common/Util/Inflector.html", "link": "Doctrine/Common/Util/Inflector.html#method_tableize", "name": "Doctrine\\Common\\Util\\Inflector::tableize", "doc": "&quot;Convert word in to the format for a Doctrine table name. Converts &#039;ModelName&#039; to &#039;model_name&#039;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Inflector", "fromLink": "Doctrine/Common/Util/Inflector.html", "link": "Doctrine/Common/Util/Inflector.html#method_classify", "name": "Doctrine\\Common\\Util\\Inflector::classify", "doc": "&quot;Convert a word in to the format for a Doctrine class name. Converts &#039;table_name&#039; to &#039;TableName&#039;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Common\\Util\\Inflector", "fromLink": "Doctrine/Common/Util/Inflector.html", "link": "Doctrine/Common/Util/Inflector.html#method_camelize", "name": "Doctrine\\Common\\Util\\Inflector::camelize", "doc": "&quot;Camelize a word. This uses the classify() method and turns the first character to lowercase&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Common", "fromLink": "Doctrine/Common.html", "link": "Doctrine/Common/Version.html", "name": "Doctrine\\Common\\Version", "doc": "&quot;Class to store and retrieve the version of Doctrine&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Common\\Version", "fromLink": "Doctrine/Common/Version.html", "link": "Doctrine/Common/Version.html#method_compare", "name": "Doctrine\\Common\\Version::compare", "doc": "&quot;Compares a Doctrine version with the current one.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


