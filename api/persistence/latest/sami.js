
window.projectVersion = 'master';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:Doctrine" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine.html">Doctrine</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Persistence" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Persistence.html">Persistence</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Persistence_Event" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Persistence/Event.html">Event</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Persistence_Event_LifecycleEventArgs" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Event/LifecycleEventArgs.html">LifecycleEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Event_LoadClassMetadataEventArgs" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html">LoadClassMetadataEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Event_ManagerEventArgs" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Event/ManagerEventArgs.html">ManagerEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Event_OnClearEventArgs" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Event/OnClearEventArgs.html">OnClearEventArgs</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Event_PreUpdateEventArgs" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Event/PreUpdateEventArgs.html">PreUpdateEventArgs</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:Doctrine_Persistence_Mapping" >                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Persistence/Mapping.html">Mapping</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:Doctrine_Persistence_Mapping_Driver" >                    <div style="padding-left:54px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="Doctrine/Persistence/Mapping/Driver.html">Driver</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:Doctrine_Persistence_Mapping_Driver_AnnotationDriver" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html">AnnotationDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_DefaultFileLocator" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html">DefaultFileLocator</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_FileDriver" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/FileDriver.html">FileDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_FileLocator" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/FileLocator.html">FileLocator</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_MappingDriver" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/MappingDriver.html">MappingDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_MappingDriverChain" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html">MappingDriverChain</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_PHPDriver" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/PHPDriver.html">PHPDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_StaticPHPDriver" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html">StaticPHPDriver</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_Driver_SymfonyFileLocator" >                    <div style="padding-left:80px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html">SymfonyFileLocator</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_AbstractClassMetadataFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html">AbstractClassMetadataFactory</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_ClassMetadata" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/ClassMetadata.html">ClassMetadata</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_ClassMetadataFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/ClassMetadataFactory.html">ClassMetadataFactory</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_MappingException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/MappingException.html">MappingException</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_ReflectionService" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/ReflectionService.html">ReflectionService</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_RuntimeReflectionService" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/RuntimeReflectionService.html">RuntimeReflectionService</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Mapping_StaticReflectionService" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="Doctrine/Persistence/Mapping/StaticReflectionService.html">StaticReflectionService</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="class:Doctrine_Persistence_AbstractManagerRegistry" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/AbstractManagerRegistry.html">AbstractManagerRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ConnectionRegistry" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ConnectionRegistry.html">ConnectionRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ManagerRegistry" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ManagerRegistry.html">ManagerRegistry</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_NotifyPropertyChanged" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/NotifyPropertyChanged.html">NotifyPropertyChanged</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ObjectManager" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ObjectManager.html">ObjectManager</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ObjectManagerAware" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ObjectManagerAware.html">ObjectManagerAware</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ObjectManagerDecorator" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ObjectManagerDecorator.html">ObjectManagerDecorator</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_ObjectRepository" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/ObjectRepository.html">ObjectRepository</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_PersistentObject" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/PersistentObject.html">PersistentObject</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_PropertyChangedListener" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/PropertyChangedListener.html">PropertyChangedListener</a>                    </div>                </li>                            <li data-name="class:Doctrine_Persistence_Proxy" >                    <div style="padding-left:44px" class="hd leaf">                        <a href="Doctrine/Persistence/Proxy.html">Proxy</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "Doctrine.html", "name": "Doctrine", "doc": "Namespace Doctrine"},{"type": "Namespace", "link": "Doctrine/Persistence.html", "name": "Doctrine\\Persistence", "doc": "Namespace Doctrine\\Persistence"},{"type": "Namespace", "link": "Doctrine/Persistence/Event.html", "name": "Doctrine\\Persistence\\Event", "doc": "Namespace Doctrine\\Persistence\\Event"},{"type": "Namespace", "link": "Doctrine/Persistence/Mapping.html", "name": "Doctrine\\Persistence\\Mapping", "doc": "Namespace Doctrine\\Persistence\\Mapping"},{"type": "Namespace", "link": "Doctrine/Persistence/Mapping/Driver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver", "doc": "Namespace Doctrine\\Persistence\\Mapping\\Driver"},
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ConnectionRegistry.html", "name": "Doctrine\\Persistence\\ConnectionRegistry", "doc": "&quot;Contract covering connection for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Persistence\\ConnectionRegistry::getDefaultConnectionName", "doc": "&quot;Gets the default connection name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnection", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnection", "doc": "&quot;Gets the named connection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnections", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnections", "doc": "&quot;Gets an array of all registered connections.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnectionNames", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnectionNames", "doc": "&quot;Gets all connection names.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ManagerRegistry.html", "name": "Doctrine\\Persistence\\ManagerRegistry", "doc": "&quot;Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Persistence\\ManagerRegistry::getDefaultManagerName", "doc": "&quot;Gets the default object manager name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManager", "name": "Doctrine\\Persistence\\ManagerRegistry::getManager", "doc": "&quot;Gets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagers", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagers", "doc": "&quot;Gets an array of all registered object managers.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_resetManager", "name": "Doctrine\\Persistence\\ManagerRegistry::resetManager", "doc": "&quot;Resets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getAliasNamespace", "name": "Doctrine\\Persistence\\ManagerRegistry::getAliasNamespace", "doc": "&quot;Resolves a registered namespace alias to the full namespace.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagerNames", "doc": "&quot;Gets all object manager names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getRepository", "name": "Doctrine\\Persistence\\ManagerRegistry::getRepository", "doc": "&quot;Gets the ObjectRepository for a persistent object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagerForClass", "doc": "&quot;Gets the object manager associated with a given class.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getName", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getName", "doc": "&quot;Gets the fully-qualified class name of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifier", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifier", "doc": "&quot;Gets the mapped identifier field name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getReflectionClass", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getReflectionClass", "doc": "&quot;Gets the ReflectionClass instance for this mapped class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isIdentifier", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isIdentifier", "doc": "&quot;Checks if the given field name is a mapped identifier for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_hasField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::hasField", "doc": "&quot;Checks if the given field is a mapped property for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_hasAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::hasAssociation", "doc": "&quot;Checks if the given field is a mapped association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isSingleValuedAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isSingleValuedAssociation", "doc": "&quot;Checks if the given field is a mapped single valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isCollectionValuedAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isCollectionValuedAssociation", "doc": "&quot;Checks if the given field is a mapped collection valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getFieldNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getFieldNames", "doc": "&quot;A numerically indexed list of field names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifierFieldNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifierFieldNames", "doc": "&quot;Returns an array of identifier field names numerically indexed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationNames", "doc": "&quot;Returns a numerically indexed list of association names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getTypeOfField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getTypeOfField", "doc": "&quot;Returns a type name of this field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationTargetClass", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationTargetClass", "doc": "&quot;Returns the target class name of the given association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isAssociationInverseSide", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isAssociationInverseSide", "doc": "&quot;Checks if the association is the inverse side of a bidirectional association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationMappedByTargetField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationMappedByTargetField", "doc": "&quot;Returns the target field of the owning side of the association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifierValues", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifierValues", "doc": "&quot;Returns the identifier of this object as an array with field name as key.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "doc": "&quot;Locates the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_findMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::findMappingFile", "doc": "&quot;Locates mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getAllClassNames", "doc": "&quot;Gets all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_fileExists", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::fileExists", "doc": "&quot;Checks if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getPaths", "doc": "&quot;Gets all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getFileExtension", "doc": "&quot;Gets the file extension that mapping files are suffixed with.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "doc": "&quot;Contract for metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService", "doc": "&quot;Very simple reflection service abstraction.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getParentClasses", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getParentClasses", "doc": "&quot;Returns an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClassShortName", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClassShortName", "doc": "&quot;Returns the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClass", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClass", "doc": "&quot;Returns a reflection class instance or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getAccessibleProperty", "doc": "&quot;Returns an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::hasPublicMethod", "doc": "&quot;Checks if the class have a public method with the given name.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/NotifyPropertyChanged.html", "name": "Doctrine\\Persistence\\NotifyPropertyChanged", "doc": "&quot;Interface for classes that notify event listeners of changes to their managed properties.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\NotifyPropertyChanged", "fromLink": "Doctrine/Persistence/NotifyPropertyChanged.html", "link": "Doctrine/Persistence/NotifyPropertyChanged.html#method_addPropertyChangedListener", "name": "Doctrine\\Persistence\\NotifyPropertyChanged::addPropertyChangedListener", "doc": "&quot;Adds a listener that wants to be notified about property changes.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectManager.html", "name": "Doctrine\\Persistence\\ObjectManager", "doc": "&quot;Contract for a Doctrine persistence layer ObjectManager class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_find", "name": "Doctrine\\Persistence\\ObjectManager::find", "doc": "&quot;Finds an object by its identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_persist", "name": "Doctrine\\Persistence\\ObjectManager::persist", "doc": "&quot;Tells the ObjectManager to make an instance managed and persistent.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_remove", "name": "Doctrine\\Persistence\\ObjectManager::remove", "doc": "&quot;Removes an object instance.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_merge", "name": "Doctrine\\Persistence\\ObjectManager::merge", "doc": "&quot;Merges the state of a detached object into the persistence context\nof this ObjectManager and returns the managed copy of the object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_clear", "name": "Doctrine\\Persistence\\ObjectManager::clear", "doc": "&quot;Clears the ObjectManager. All objects that are currently managed\nby this ObjectManager become detached.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_detach", "name": "Doctrine\\Persistence\\ObjectManager::detach", "doc": "&quot;Detaches an object from the ObjectManager, causing a managed object to\nbecome detached. Unflushed changes made to the object if any\n(including removal of the object), will not be synchronized to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_refresh", "name": "Doctrine\\Persistence\\ObjectManager::refresh", "doc": "&quot;Refreshes the persistent state of an object from the database,\noverriding any local changes that have not yet been persisted.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_flush", "name": "Doctrine\\Persistence\\ObjectManager::flush", "doc": "&quot;Flushes all changes to objects that have been queued up to now to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getRepository", "name": "Doctrine\\Persistence\\ObjectManager::getRepository", "doc": "&quot;Gets the repository for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getClassMetadata", "name": "Doctrine\\Persistence\\ObjectManager::getClassMetadata", "doc": "&quot;Returns the ClassMetadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getMetadataFactory", "name": "Doctrine\\Persistence\\ObjectManager::getMetadataFactory", "doc": "&quot;Gets the metadata factory used to gather the metadata of classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_initializeObject", "name": "Doctrine\\Persistence\\ObjectManager::initializeObject", "doc": "&quot;Helper method to initialize a lazy loading proxy or persistent collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_contains", "name": "Doctrine\\Persistence\\ObjectManager::contains", "doc": "&quot;Checks if the object is part of the current UnitOfWork and therefore managed.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectManagerAware.html", "name": "Doctrine\\Persistence\\ObjectManagerAware", "doc": "&quot;Makes a Persistent Objects aware of its own object-manager.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerAware", "fromLink": "Doctrine/Persistence/ObjectManagerAware.html", "link": "Doctrine/Persistence/ObjectManagerAware.html#method_injectObjectManager", "name": "Doctrine\\Persistence\\ObjectManagerAware::injectObjectManager", "doc": "&quot;Injects responsible ObjectManager and the ClassMetadata into this persistent object.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectRepository.html", "name": "Doctrine\\Persistence\\ObjectRepository", "doc": "&quot;Contract for a Doctrine persistence layer ObjectRepository class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_find", "name": "Doctrine\\Persistence\\ObjectRepository::find", "doc": "&quot;Finds an object by its primary key \/ identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findAll", "name": "Doctrine\\Persistence\\ObjectRepository::findAll", "doc": "&quot;Finds all objects in the repository.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findBy", "name": "Doctrine\\Persistence\\ObjectRepository::findBy", "doc": "&quot;Finds objects by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findOneBy", "name": "Doctrine\\Persistence\\ObjectRepository::findOneBy", "doc": "&quot;Finds a single object by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_getClassName", "name": "Doctrine\\Persistence\\ObjectRepository::getClassName", "doc": "&quot;Returns the class name of the object managed by the repository.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/PropertyChangedListener.html", "name": "Doctrine\\Persistence\\PropertyChangedListener", "doc": "&quot;Contract for classes that are potential listeners of a {see NotifyPropertyChanged}\nimplementor.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\PropertyChangedListener", "fromLink": "Doctrine/Persistence/PropertyChangedListener.html", "link": "Doctrine/Persistence/PropertyChangedListener.html#method_propertyChanged", "name": "Doctrine\\Persistence\\PropertyChangedListener::propertyChanged", "doc": "&quot;Collect information about a property change.&quot;"},
            
            {"type": "Interface", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/Proxy.html", "name": "Doctrine\\Persistence\\Proxy", "doc": "&quot;Interface for proxy classes.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Proxy", "fromLink": "Doctrine/Persistence/Proxy.html", "link": "Doctrine/Persistence/Proxy.html#method___load", "name": "Doctrine\\Persistence\\Proxy::__load", "doc": "&quot;Initializes this proxy if its not yet initialized.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Proxy", "fromLink": "Doctrine/Persistence/Proxy.html", "link": "Doctrine/Persistence/Proxy.html#method___isInitialized", "name": "Doctrine\\Persistence\\Proxy::__isInitialized", "doc": "&quot;Returns whether this proxy is initialized or not.&quot;"},
            
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html", "name": "Doctrine\\Persistence\\AbstractManagerRegistry", "doc": "&quot;Abstract implementation of the ManagerRegistry contract.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method___construct", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getService", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getService", "doc": "&quot;Fetches\/creates the given services.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_resetService", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::resetService", "doc": "&quot;Resets the given services.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getName", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getName", "doc": "&quot;Gets the name of the registry.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getConnection", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getConnection", "doc": "&quot;Gets the named connection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getConnectionNames", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getConnectionNames", "doc": "&quot;Gets all connection names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getConnections", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getConnections", "doc": "&quot;Gets an array of all registered connections.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getDefaultConnectionName", "doc": "&quot;Gets the default connection name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getDefaultManagerName", "doc": "&quot;Gets the default object manager name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getManager", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getManager", "doc": "&quot;Gets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getManagerForClass", "doc": "&quot;Gets the object manager associated with a given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getManagerNames", "doc": "&quot;Gets all object manager names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getManagers", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getManagers", "doc": "&quot;Gets an array of all registered object managers.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_getRepository", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::getRepository", "doc": "&quot;Gets the ObjectRepository for a persistent object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\AbstractManagerRegistry", "fromLink": "Doctrine/Persistence/AbstractManagerRegistry.html", "link": "Doctrine/Persistence/AbstractManagerRegistry.html#method_resetManager", "name": "Doctrine\\Persistence\\AbstractManagerRegistry::resetManager", "doc": "&quot;Resets a named object manager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ConnectionRegistry.html", "name": "Doctrine\\Persistence\\ConnectionRegistry", "doc": "&quot;Contract covering connection for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getDefaultConnectionName", "name": "Doctrine\\Persistence\\ConnectionRegistry::getDefaultConnectionName", "doc": "&quot;Gets the default connection name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnection", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnection", "doc": "&quot;Gets the named connection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnections", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnections", "doc": "&quot;Gets an array of all registered connections.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ConnectionRegistry", "fromLink": "Doctrine/Persistence/ConnectionRegistry.html", "link": "Doctrine/Persistence/ConnectionRegistry.html#method_getConnectionNames", "name": "Doctrine\\Persistence\\ConnectionRegistry::getConnectionNames", "doc": "&quot;Gets all connection names.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Event", "fromLink": "Doctrine/Persistence/Event.html", "link": "Doctrine/Persistence/Event/LifecycleEventArgs.html", "name": "Doctrine\\Persistence\\Event\\LifecycleEventArgs", "doc": "&quot;Lifecycle Events are triggered by the UnitOfWork during lifecycle transitions\nof entities.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Persistence/Event/LifecycleEventArgs.html#method___construct", "name": "Doctrine\\Persistence\\Event\\LifecycleEventArgs::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Persistence/Event/LifecycleEventArgs.html#method_getEntity", "name": "Doctrine\\Persistence\\Event\\LifecycleEventArgs::getEntity", "doc": "&quot;Retrieves the associated entity.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Persistence/Event/LifecycleEventArgs.html#method_getObject", "name": "Doctrine\\Persistence\\Event\\LifecycleEventArgs::getObject", "doc": "&quot;Retrieves the associated object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LifecycleEventArgs", "fromLink": "Doctrine/Persistence/Event/LifecycleEventArgs.html", "link": "Doctrine/Persistence/Event/LifecycleEventArgs.html#method_getObjectManager", "name": "Doctrine\\Persistence\\Event\\LifecycleEventArgs::getObjectManager", "doc": "&quot;Retrieves the associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Event", "fromLink": "Doctrine/Persistence/Event.html", "link": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html", "name": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs", "doc": "&quot;Class that holds event arguments for a loadMetadata event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html#method___construct", "name": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html#method_getClassMetadata", "name": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs::getClassMetadata", "doc": "&quot;Retrieves the associated ClassMetadata.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs", "fromLink": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html", "link": "Doctrine/Persistence/Event/LoadClassMetadataEventArgs.html#method_getObjectManager", "name": "Doctrine\\Persistence\\Event\\LoadClassMetadataEventArgs::getObjectManager", "doc": "&quot;Retrieves the associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Event", "fromLink": "Doctrine/Persistence/Event.html", "link": "Doctrine/Persistence/Event/ManagerEventArgs.html", "name": "Doctrine\\Persistence\\Event\\ManagerEventArgs", "doc": "&quot;Provides event arguments for the preFlush event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\ManagerEventArgs", "fromLink": "Doctrine/Persistence/Event/ManagerEventArgs.html", "link": "Doctrine/Persistence/Event/ManagerEventArgs.html#method___construct", "name": "Doctrine\\Persistence\\Event\\ManagerEventArgs::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\ManagerEventArgs", "fromLink": "Doctrine/Persistence/Event/ManagerEventArgs.html", "link": "Doctrine/Persistence/Event/ManagerEventArgs.html#method_getObjectManager", "name": "Doctrine\\Persistence\\Event\\ManagerEventArgs::getObjectManager", "doc": "&quot;Retrieves the associated ObjectManager.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Event", "fromLink": "Doctrine/Persistence/Event.html", "link": "Doctrine/Persistence/Event/OnClearEventArgs.html", "name": "Doctrine\\Persistence\\Event\\OnClearEventArgs", "doc": "&quot;Provides event arguments for the onClear event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Persistence/Event/OnClearEventArgs.html#method___construct", "name": "Doctrine\\Persistence\\Event\\OnClearEventArgs::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Persistence/Event/OnClearEventArgs.html#method_getObjectManager", "name": "Doctrine\\Persistence\\Event\\OnClearEventArgs::getObjectManager", "doc": "&quot;Retrieves the associated ObjectManager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Persistence/Event/OnClearEventArgs.html#method_getEntityClass", "name": "Doctrine\\Persistence\\Event\\OnClearEventArgs::getEntityClass", "doc": "&quot;Returns the name of the entity class that is cleared, or null if all are cleared.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\OnClearEventArgs", "fromLink": "Doctrine/Persistence/Event/OnClearEventArgs.html", "link": "Doctrine/Persistence/Event/OnClearEventArgs.html#method_clearsAllEntities", "name": "Doctrine\\Persistence\\Event\\OnClearEventArgs::clearsAllEntities", "doc": "&quot;Returns whether this event clears all entities.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Event", "fromLink": "Doctrine/Persistence/Event.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "doc": "&quot;Class that holds event arguments for a preUpdate event.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method___construct", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method_getEntityChangeSet", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::getEntityChangeSet", "doc": "&quot;Retrieves the entity changeset.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method_hasChangedField", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::hasChangedField", "doc": "&quot;Checks if field has a changeset.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method_getOldValue", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::getOldValue", "doc": "&quot;Gets the old value of the changeset of the changed field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method_getNewValue", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::getNewValue", "doc": "&quot;Gets the new value of the changeset of the changed field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs", "fromLink": "Doctrine/Persistence/Event/PreUpdateEventArgs.html", "link": "Doctrine/Persistence/Event/PreUpdateEventArgs.html#method_setNewValue", "name": "Doctrine\\Persistence\\Event\\PreUpdateEventArgs::setNewValue", "doc": "&quot;Sets the new value of this field.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ManagerRegistry.html", "name": "Doctrine\\Persistence\\ManagerRegistry", "doc": "&quot;Contract covering object managers for a Doctrine persistence layer ManagerRegistry class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getDefaultManagerName", "name": "Doctrine\\Persistence\\ManagerRegistry::getDefaultManagerName", "doc": "&quot;Gets the default object manager name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManager", "name": "Doctrine\\Persistence\\ManagerRegistry::getManager", "doc": "&quot;Gets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagers", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagers", "doc": "&quot;Gets an array of all registered object managers.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_resetManager", "name": "Doctrine\\Persistence\\ManagerRegistry::resetManager", "doc": "&quot;Resets a named object manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getAliasNamespace", "name": "Doctrine\\Persistence\\ManagerRegistry::getAliasNamespace", "doc": "&quot;Resolves a registered namespace alias to the full namespace.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagerNames", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagerNames", "doc": "&quot;Gets all object manager names.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getRepository", "name": "Doctrine\\Persistence\\ManagerRegistry::getRepository", "doc": "&quot;Gets the ObjectRepository for a persistent object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ManagerRegistry", "fromLink": "Doctrine/Persistence/ManagerRegistry.html", "link": "Doctrine/Persistence/ManagerRegistry.html#method_getManagerForClass", "name": "Doctrine\\Persistence\\ManagerRegistry::getManagerForClass", "doc": "&quot;Gets the object manager associated with a given class.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "doc": "&quot;The ClassMetadataFactory is used to create ClassMetadata objects that contain all the\nmetadata mapping informations of a class which describes how a class should be mapped\nto a relational database.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setCacheDriver", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::setCacheDriver", "doc": "&quot;Sets the cache driver used by the factory to cache ClassMetadata instances.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getCacheDriver", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getCacheDriver", "doc": "&quot;Gets the cache driver used by the factory to cache ClassMetadata instances.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getLoadedMetadata", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getLoadedMetadata", "doc": "&quot;Returns an array of all the loaded metadata currently in memory.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_initialize", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::initialize", "doc": "&quot;Lazy initialization of this stuff, especially the metadata driver,\nsince these are not needed at all when a metadata cache is active.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getFqcnFromAlias", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getFqcnFromAlias", "doc": "&quot;Gets the fully qualified class-name from the namespace alias.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getDriver", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getDriver", "doc": "&quot;Returns the mapping driver implementation.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_wakeupReflection", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::wakeupReflection", "doc": "&quot;Wakes up reflection after ClassMetadata gets unserialized from cache.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_initializeReflection", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::initializeReflection", "doc": "&quot;Initializes Reflection after ClassMetadata was constructed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_isEntity", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::isEntity", "doc": "&quot;Checks whether the class metadata is an entity.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getParentClasses", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getParentClasses", "doc": "&quot;Gets an array of parent classes for the given entity class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_loadMetadata", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::loadMetadata", "doc": "&quot;Loads the metadata of the class in question and all it&#039;s ancestors whose metadata\nis still not loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_onNotFoundMetadata", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::onNotFoundMetadata", "doc": "&quot;Provides a fallback hook for loading metadata when loading failed due to reflection\/mapping exceptions&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_doLoadMetadata", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::doLoadMetadata", "doc": "&quot;Actually loads the metadata from the underlying metadata.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_newClassMetadataInstance", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::newClassMetadataInstance", "doc": "&quot;Creates a new ClassMetadata instance for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_setReflectionService", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::setReflectionService", "doc": "&quot;Sets the reflectionService.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/AbstractClassMetadataFactory.html#method_getReflectionService", "name": "Doctrine\\Persistence\\Mapping\\AbstractClassMetadataFactory::getReflectionService", "doc": "&quot;Gets the reflection service associated with this metadata factory.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getName", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getName", "doc": "&quot;Gets the fully-qualified class name of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifier", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifier", "doc": "&quot;Gets the mapped identifier field name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getReflectionClass", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getReflectionClass", "doc": "&quot;Gets the ReflectionClass instance for this mapped class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isIdentifier", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isIdentifier", "doc": "&quot;Checks if the given field name is a mapped identifier for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_hasField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::hasField", "doc": "&quot;Checks if the given field is a mapped property for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_hasAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::hasAssociation", "doc": "&quot;Checks if the given field is a mapped association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isSingleValuedAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isSingleValuedAssociation", "doc": "&quot;Checks if the given field is a mapped single valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isCollectionValuedAssociation", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isCollectionValuedAssociation", "doc": "&quot;Checks if the given field is a mapped collection valued association for this class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getFieldNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getFieldNames", "doc": "&quot;A numerically indexed list of field names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifierFieldNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifierFieldNames", "doc": "&quot;Returns an array of identifier field names numerically indexed.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationNames", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationNames", "doc": "&quot;Returns a numerically indexed list of association names of this persistent class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getTypeOfField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getTypeOfField", "doc": "&quot;Returns a type name of this field.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationTargetClass", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationTargetClass", "doc": "&quot;Returns the target class name of the given association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_isAssociationInverseSide", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::isAssociationInverseSide", "doc": "&quot;Checks if the association is the inverse side of a bidirectional association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getAssociationMappedByTargetField", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getAssociationMappedByTargetField", "doc": "&quot;Returns the target field of the owning side of the association.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadata", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadata.html", "link": "Doctrine/Persistence/Mapping/ClassMetadata.html#method_getIdentifierValues", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadata::getIdentifierValues", "doc": "&quot;Returns the identifier of this object as an array with field name as key.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "doc": "&quot;Contract for a Doctrine persistence layer ClassMetadata class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_getAllMetadata", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::getAllMetadata", "doc": "&quot;Forces the factory to load the metadata of all classes known to the underlying\nmapping driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_getMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::getMetadataFor", "doc": "&quot;Gets the class metadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_hasMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::hasMetadataFor", "doc": "&quot;Checks whether the factory has the metadata for a class loaded already.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_setMetadataFor", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::setMetadataFor", "doc": "&quot;Sets the metadata descriptor for a specific class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory", "fromLink": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html", "link": "Doctrine/Persistence/Mapping/ClassMetadataFactory.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\ClassMetadataFactory::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "doc": "&quot;The AnnotationDriver reads the mapping metadata from docblock annotations.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::__construct", "doc": "&quot;Initializes a new AnnotationDriver that uses the given AnnotationReader for reading\ndocblock annotations.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_addPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::addPaths", "doc": "&quot;Appends lookup paths to metadata driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_getPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::getPaths", "doc": "&quot;Retrieves the defined metadata lookup paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_addExcludePaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::addExcludePaths", "doc": "&quot;Append exclude lookup paths to metadata driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_getExcludePaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::getExcludePaths", "doc": "&quot;Retrieve the defined metadata lookup exclude paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_getReader", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::getReader", "doc": "&quot;Retrieve the current annotation reader&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_getFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::getFileExtension", "doc": "&quot;Gets the file extension used to look for mapping files under.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_setFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::setFileExtension", "doc": "&quot;Sets the file extension used to look for mapping files under.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::isTransient", "doc": "&quot;Returns whether the class with the specified name is transient. Only non-transient\nclasses, that is entities and mapped superclasses, should have their metadata loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/AnnotationDriver.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\AnnotationDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "doc": "&quot;Locates the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_addPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::addPaths", "doc": "&quot;Appends lookup paths to metadata driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getPaths", "doc": "&quot;Retrieves the defined metadata lookup paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getFileExtension", "doc": "&quot;Gets the file extension used to look for mapping files under.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_setFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::setFileExtension", "doc": "&quot;Sets the file extension used to look for mapping files under.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_findMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::findMappingFile", "doc": "&quot;Locates mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::getAllClassNames", "doc": "&quot;Gets all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/DefaultFileLocator.html#method_fileExists", "name": "Doctrine\\Persistence\\Mapping\\Driver\\DefaultFileLocator::fileExists", "doc": "&quot;Checks if a file can be found for this class name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "doc": "&quot;Base driver for file-based metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_setGlobalBasename", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::setGlobalBasename", "doc": "&quot;Sets the global basename.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_getGlobalBasename", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::getGlobalBasename", "doc": "&quot;Retrieves the global basename.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_getElement", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::getElement", "doc": "&quot;Gets the element of schema meta data for the class from the mapping file.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_loadMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::loadMappingFile", "doc": "&quot;Loads a mapping file with the given name and returns a map\nfrom class\/entity names to their corresponding file driver elements.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_initialize", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::initialize", "doc": "&quot;Initializes the class cache from all the global files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_getLocator", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::getLocator", "doc": "&quot;Retrieves the locator used to discover mapping files by className.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileDriver.html#method_setLocator", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileDriver::setLocator", "doc": "&quot;Sets the locator used to discover mapping files by className.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "doc": "&quot;Locates the file that contains the metadata information for a given class name.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_findMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::findMappingFile", "doc": "&quot;Locates mapping file for the given class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getAllClassNames", "doc": "&quot;Gets all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_fileExists", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::fileExists", "doc": "&quot;Checks if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getPaths", "doc": "&quot;Gets all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/FileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/FileLocator.html#method_getFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\FileLocator::getFileExtension", "doc": "&quot;Gets the file extension that mapping files are suffixed with.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "doc": "&quot;Contract for metadata drivers.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriver.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriver::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "doc": "&quot;The DriverChain allows you to add multiple other mapping drivers for\ncertain namespaces.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_getDefaultDriver", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::getDefaultDriver", "doc": "&quot;Gets the default driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_setDefaultDriver", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::setDefaultDriver", "doc": "&quot;Set the default driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_addDriver", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::addDriver", "doc": "&quot;Adds a nested driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_getDrivers", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::getDrivers", "doc": "&quot;Gets the array of nested drivers.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_loadMetadataForClass", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain", "fromLink": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html", "link": "Doctrine/Persistence/Mapping/Driver/MappingDriverChain.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\MappingDriverChain::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver", "doc": "&quot;The PHPDriver includes php files which just populate ClassMetadataInfo\ninstances with plain PHP code.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver::__construct", "doc": "&quot;Initializes a new FileDriver that looks in the given path(s) for mapping\ndocuments and operates in the specified operating mode.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/PHPDriver.html#method_loadMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\PHPDriver::loadMappingFile", "doc": "&quot;Loads a mapping file with the given name and returns a map\nfrom class\/entity names to their corresponding file driver elements.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "doc": "&quot;The StaticPHPDriver calls a static loadMetadata() method on your entity\nclasses where you can manually populate the ClassMetadata instance.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html#method_addPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver::addPaths", "doc": "&quot;Adds paths.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html#method_loadMetadataForClass", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver::loadMetadataForClass", "doc": "&quot;Loads the metadata for the specified class into the provided container.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver::getAllClassNames", "doc": "&quot;Gets the names of all mapped classes known to this driver.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver", "fromLink": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html", "link": "Doctrine/Persistence/Mapping/Driver/StaticPHPDriver.html#method_isTransient", "name": "Doctrine\\Persistence\\Mapping\\Driver\\StaticPHPDriver::isTransient", "doc": "&quot;Returns whether the class with the specified name should have its metadata loaded.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping\\Driver", "fromLink": "Doctrine/Persistence/Mapping/Driver.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "doc": "&quot;The Symfony File Locator makes a simplifying assumptions compared\nto the DefaultFileLocator. By assuming paths only contain entities of a certain\nnamespace the mapping files consists of the short classname only.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method___construct", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::__construct", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_addNamespacePrefixes", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::addNamespacePrefixes", "doc": "&quot;Adds Namespace Prefixes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getNamespacePrefixes", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getNamespacePrefixes", "doc": "&quot;Gets Namespace Prefixes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getPaths", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getPaths", "doc": "&quot;Gets all the paths that this file locator looks for mapping files.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getFileExtension", "doc": "&quot;Gets the file extension that mapping files are suffixed with.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_setFileExtension", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::setFileExtension", "doc": "&quot;Sets the file extension used to look for mapping files under.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_fileExists", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::fileExists", "doc": "&quot;Checks if a file can be found for this class name.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_getAllClassNames", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::getAllClassNames", "doc": "&quot;Gets all class names that are found with this file locator.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator", "fromLink": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html", "link": "Doctrine/Persistence/Mapping/Driver/SymfonyFileLocator.html#method_findMappingFile", "name": "Doctrine\\Persistence\\Mapping\\Driver\\SymfonyFileLocator::findMappingFile", "doc": "&quot;Locates mapping file for the given class name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/MappingException.html", "name": "Doctrine\\Persistence\\Mapping\\MappingException", "doc": "&quot;A MappingException indicates that something is wrong with the mapping setup.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_classNotFoundInNamespaces", "name": "Doctrine\\Persistence\\Mapping\\MappingException::classNotFoundInNamespaces", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_pathRequired", "name": "Doctrine\\Persistence\\Mapping\\MappingException::pathRequired", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_fileMappingDriversRequireConfiguredDirectoryPath", "name": "Doctrine\\Persistence\\Mapping\\MappingException::fileMappingDriversRequireConfiguredDirectoryPath", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_mappingFileNotFound", "name": "Doctrine\\Persistence\\Mapping\\MappingException::mappingFileNotFound", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_invalidMappingFile", "name": "Doctrine\\Persistence\\Mapping\\MappingException::invalidMappingFile", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\MappingException", "fromLink": "Doctrine/Persistence/Mapping/MappingException.html", "link": "Doctrine/Persistence/Mapping/MappingException.html#method_nonExistingClass", "name": "Doctrine\\Persistence\\Mapping\\MappingException::nonExistingClass", "doc": "&quot;&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService", "doc": "&quot;Very simple reflection service abstraction.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getParentClasses", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getParentClasses", "doc": "&quot;Returns an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClassShortName", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClassShortName", "doc": "&quot;Returns the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getClass", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getClass", "doc": "&quot;Returns a reflection class instance or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::getAccessibleProperty", "doc": "&quot;Returns an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\ReflectionService", "fromLink": "Doctrine/Persistence/Mapping/ReflectionService.html", "link": "Doctrine/Persistence/Mapping/ReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Persistence\\Mapping\\ReflectionService::hasPublicMethod", "doc": "&quot;Checks if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "doc": "&quot;PHP Runtime Reflection Service.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_getParentClasses", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::getParentClasses", "doc": "&quot;Returns an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_getClassShortName", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::getClassShortName", "doc": "&quot;Returns the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_getClass", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::getClass", "doc": "&quot;Returns a reflection class instance or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::getAccessibleProperty", "doc": "&quot;Returns an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService", "fromLink": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html", "link": "Doctrine/Persistence/Mapping/RuntimeReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Persistence\\Mapping\\RuntimeReflectionService::hasPublicMethod", "doc": "&quot;Checks if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence\\Mapping", "fromLink": "Doctrine/Persistence/Mapping.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "doc": "&quot;PHP Runtime Reflection Service.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_getParentClasses", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::getParentClasses", "doc": "&quot;Returns an array of the parent classes (not interfaces) for the given class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_getClassShortName", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::getClassShortName", "doc": "&quot;Returns the shortname of a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_getClassNamespace", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::getClassNamespace", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_getClass", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::getClass", "doc": "&quot;Returns a reflection class instance or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_getAccessibleProperty", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::getAccessibleProperty", "doc": "&quot;Returns an accessible property (setAccessible(true)) or null.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Mapping\\StaticReflectionService", "fromLink": "Doctrine/Persistence/Mapping/StaticReflectionService.html", "link": "Doctrine/Persistence/Mapping/StaticReflectionService.html#method_hasPublicMethod", "name": "Doctrine\\Persistence\\Mapping\\StaticReflectionService::hasPublicMethod", "doc": "&quot;Checks if the class have a public method with the given name.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/NotifyPropertyChanged.html", "name": "Doctrine\\Persistence\\NotifyPropertyChanged", "doc": "&quot;Interface for classes that notify event listeners of changes to their managed properties.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\NotifyPropertyChanged", "fromLink": "Doctrine/Persistence/NotifyPropertyChanged.html", "link": "Doctrine/Persistence/NotifyPropertyChanged.html#method_addPropertyChangedListener", "name": "Doctrine\\Persistence\\NotifyPropertyChanged::addPropertyChangedListener", "doc": "&quot;Adds a listener that wants to be notified about property changes.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectManager.html", "name": "Doctrine\\Persistence\\ObjectManager", "doc": "&quot;Contract for a Doctrine persistence layer ObjectManager class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_find", "name": "Doctrine\\Persistence\\ObjectManager::find", "doc": "&quot;Finds an object by its identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_persist", "name": "Doctrine\\Persistence\\ObjectManager::persist", "doc": "&quot;Tells the ObjectManager to make an instance managed and persistent.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_remove", "name": "Doctrine\\Persistence\\ObjectManager::remove", "doc": "&quot;Removes an object instance.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_merge", "name": "Doctrine\\Persistence\\ObjectManager::merge", "doc": "&quot;Merges the state of a detached object into the persistence context\nof this ObjectManager and returns the managed copy of the object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_clear", "name": "Doctrine\\Persistence\\ObjectManager::clear", "doc": "&quot;Clears the ObjectManager. All objects that are currently managed\nby this ObjectManager become detached.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_detach", "name": "Doctrine\\Persistence\\ObjectManager::detach", "doc": "&quot;Detaches an object from the ObjectManager, causing a managed object to\nbecome detached. Unflushed changes made to the object if any\n(including removal of the object), will not be synchronized to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_refresh", "name": "Doctrine\\Persistence\\ObjectManager::refresh", "doc": "&quot;Refreshes the persistent state of an object from the database,\noverriding any local changes that have not yet been persisted.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_flush", "name": "Doctrine\\Persistence\\ObjectManager::flush", "doc": "&quot;Flushes all changes to objects that have been queued up to now to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getRepository", "name": "Doctrine\\Persistence\\ObjectManager::getRepository", "doc": "&quot;Gets the repository for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getClassMetadata", "name": "Doctrine\\Persistence\\ObjectManager::getClassMetadata", "doc": "&quot;Returns the ClassMetadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_getMetadataFactory", "name": "Doctrine\\Persistence\\ObjectManager::getMetadataFactory", "doc": "&quot;Gets the metadata factory used to gather the metadata of classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_initializeObject", "name": "Doctrine\\Persistence\\ObjectManager::initializeObject", "doc": "&quot;Helper method to initialize a lazy loading proxy or persistent collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManager", "fromLink": "Doctrine/Persistence/ObjectManager.html", "link": "Doctrine/Persistence/ObjectManager.html#method_contains", "name": "Doctrine\\Persistence\\ObjectManager::contains", "doc": "&quot;Checks if the object is part of the current UnitOfWork and therefore managed.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectManagerAware.html", "name": "Doctrine\\Persistence\\ObjectManagerAware", "doc": "&quot;Makes a Persistent Objects aware of its own object-manager.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerAware", "fromLink": "Doctrine/Persistence/ObjectManagerAware.html", "link": "Doctrine/Persistence/ObjectManagerAware.html#method_injectObjectManager", "name": "Doctrine\\Persistence\\ObjectManagerAware::injectObjectManager", "doc": "&quot;Injects responsible ObjectManager and the ClassMetadata into this persistent object.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html", "name": "Doctrine\\Persistence\\ObjectManagerDecorator", "doc": "&quot;Base class to simplify ObjectManager decorators&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_find", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::find", "doc": "&quot;Finds an object by its identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_persist", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::persist", "doc": "&quot;Tells the ObjectManager to make an instance managed and persistent.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_remove", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::remove", "doc": "&quot;Removes an object instance.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_merge", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::merge", "doc": "&quot;Merges the state of a detached object into the persistence context\nof this ObjectManager and returns the managed copy of the object.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_clear", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::clear", "doc": "&quot;Clears the ObjectManager. All objects that are currently managed\nby this ObjectManager become detached.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_detach", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::detach", "doc": "&quot;Detaches an object from the ObjectManager, causing a managed object to\nbecome detached. Unflushed changes made to the object if any\n(including removal of the object), will not be synchronized to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_refresh", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::refresh", "doc": "&quot;Refreshes the persistent state of an object from the database,\noverriding any local changes that have not yet been persisted.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_flush", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::flush", "doc": "&quot;Flushes all changes to objects that have been queued up to now to the database.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_getRepository", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::getRepository", "doc": "&quot;Gets the repository for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_getClassMetadata", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::getClassMetadata", "doc": "&quot;Returns the ClassMetadata descriptor for a class.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_getMetadataFactory", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::getMetadataFactory", "doc": "&quot;Gets the metadata factory used to gather the metadata of classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_initializeObject", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::initializeObject", "doc": "&quot;Helper method to initialize a lazy loading proxy or persistent collection.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectManagerDecorator", "fromLink": "Doctrine/Persistence/ObjectManagerDecorator.html", "link": "Doctrine/Persistence/ObjectManagerDecorator.html#method_contains", "name": "Doctrine\\Persistence\\ObjectManagerDecorator::contains", "doc": "&quot;Checks if the object is part of the current UnitOfWork and therefore managed.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/ObjectRepository.html", "name": "Doctrine\\Persistence\\ObjectRepository", "doc": "&quot;Contract for a Doctrine persistence layer ObjectRepository class to implement.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_find", "name": "Doctrine\\Persistence\\ObjectRepository::find", "doc": "&quot;Finds an object by its primary key \/ identifier.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findAll", "name": "Doctrine\\Persistence\\ObjectRepository::findAll", "doc": "&quot;Finds all objects in the repository.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findBy", "name": "Doctrine\\Persistence\\ObjectRepository::findBy", "doc": "&quot;Finds objects by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_findOneBy", "name": "Doctrine\\Persistence\\ObjectRepository::findOneBy", "doc": "&quot;Finds a single object by a set of criteria.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\ObjectRepository", "fromLink": "Doctrine/Persistence/ObjectRepository.html", "link": "Doctrine/Persistence/ObjectRepository.html#method_getClassName", "name": "Doctrine\\Persistence\\ObjectRepository::getClassName", "doc": "&quot;Returns the class name of the object managed by the repository.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/PersistentObject.html", "name": "Doctrine\\Persistence\\PersistentObject", "doc": "&quot;PersistentObject base class that implements getter\/setter methods for all mapped fields and associations\nby overriding __call.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\PersistentObject", "fromLink": "Doctrine/Persistence/PersistentObject.html", "link": "Doctrine/Persistence/PersistentObject.html#method_setObjectManager", "name": "Doctrine\\Persistence\\PersistentObject::setObjectManager", "doc": "&quot;Sets the object manager responsible for all persistent object base classes.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\PersistentObject", "fromLink": "Doctrine/Persistence/PersistentObject.html", "link": "Doctrine/Persistence/PersistentObject.html#method_getObjectManager", "name": "Doctrine\\Persistence\\PersistentObject::getObjectManager", "doc": "&quot;&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\PersistentObject", "fromLink": "Doctrine/Persistence/PersistentObject.html", "link": "Doctrine/Persistence/PersistentObject.html#method_injectObjectManager", "name": "Doctrine\\Persistence\\PersistentObject::injectObjectManager", "doc": "&quot;Injects the Doctrine Object Manager.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\PersistentObject", "fromLink": "Doctrine/Persistence/PersistentObject.html", "link": "Doctrine/Persistence/PersistentObject.html#method___call", "name": "Doctrine\\Persistence\\PersistentObject::__call", "doc": "&quot;Magic methods.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/PropertyChangedListener.html", "name": "Doctrine\\Persistence\\PropertyChangedListener", "doc": "&quot;Contract for classes that are potential listeners of a {see NotifyPropertyChanged}\nimplementor.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\PropertyChangedListener", "fromLink": "Doctrine/Persistence/PropertyChangedListener.html", "link": "Doctrine/Persistence/PropertyChangedListener.html#method_propertyChanged", "name": "Doctrine\\Persistence\\PropertyChangedListener::propertyChanged", "doc": "&quot;Collect information about a property change.&quot;"},
            
            {"type": "Class", "fromName": "Doctrine\\Persistence", "fromLink": "Doctrine/Persistence.html", "link": "Doctrine/Persistence/Proxy.html", "name": "Doctrine\\Persistence\\Proxy", "doc": "&quot;Interface for proxy classes.&quot;"},
                                                        {"type": "Method", "fromName": "Doctrine\\Persistence\\Proxy", "fromLink": "Doctrine/Persistence/Proxy.html", "link": "Doctrine/Persistence/Proxy.html#method___load", "name": "Doctrine\\Persistence\\Proxy::__load", "doc": "&quot;Initializes this proxy if its not yet initialized.&quot;"},
                    {"type": "Method", "fromName": "Doctrine\\Persistence\\Proxy", "fromLink": "Doctrine/Persistence/Proxy.html", "link": "Doctrine/Persistence/Proxy.html#method___isInitialized", "name": "Doctrine\\Persistence\\Proxy::__isInitialized", "doc": "&quot;Returns whether this proxy is initialized or not.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


