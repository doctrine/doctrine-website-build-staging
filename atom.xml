<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Doctrine]]></title>
    <link href="https://staging.doctrine-project.org/atom.xml" rel="self" />
    <link href="https://staging.doctrine-project.org/" />
    <updated>2018-08-31T18:04:52+00:00</updated>
    <id>https://staging.doctrine-project.org/</id>

            <entry>
            <title type="html"><![CDATA[Phasing out Doctrine Common &amp; release of DBAL 2.8 and ORM 2.6.2]]></title>
            <link href="https://staging.doctrine-project.org/2018/07/12/common-2-9-and-dbal-2-8-and-orm-2-6-2.html"/>
            <updated>2018-07-12T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2018/07/12/common-2-9-and-dbal-2-8-and-orm-2-6-2.html</id>
            <content type="html"><![CDATA[<h3>Common 2.9 and phasing out the package</h3>
<p>As another step in the ongoing effort to eliminate <code>doctrine/common</code>,
there are now three new separate Doctrine packages:</p>
<ul>
<li><a href="https://github.com/doctrine/persistence"><code>doctrine/persistence</code></a></li>
<li><a href="https://github.com/doctrine/event-manager"><code>doctrine/event-manager</code></a></li>
<li><a href="https://github.com/doctrine/reflection"><code>doctrine/reflection</code></a></li>
</ul>
<p>This release introduces the following deprecations:</p>
<ul>
<li><code>Doctrine\Common\Proxy</code> component is deprecated, use
<a href="https://github.com/ocramius/ProxyManager"><code>ocramius/proxy-manager</code></a> instead;</li>
<li><code>Doctrine\Common\Util\Debug</code> is deprecated, use
<a href="https://github.com/symfony/var-dumper"><code>symfony/var-dumper</code></a> instead;</li>
<li><code>Doctrine\Common\Lexer</code> is deprecated, use <code>Doctrine\Common\Lexer\AbstractLexer</code>
from <a href="https://github.com/doctrine/lexer"><code>doctrine/lexer</code></a> or migrate to
<a href="https://github.com/hoaproject/Compiler">hoa/compiler</a> instead;</li>
<li><code>Doctrine\Common\Util\Inflector</code> is deprecated, use <code>Doctrine\Common\Inflector\Inflector</code>
from <a href="https://github.com/doctrine/inflector"><code>doctrine/inflector</code></a> instead;</li>
<li><code>Doctrine\Common\Util\ClassUtils</code> is deprecated without replacement;</li>
<li><code>Doctrine\Common\Version</code> is deprecated, refrain from checking Common version at runtime;</li>
<li><code>Doctrine\Common\CommonException</code> is deprecated without replacement.</li>
</ul>
<p>In addition to that, there will be no <code>doctrine/common</code> 3.0 and the package
will be gradually phased out.</p>
<p>Version 2.x will be maintained at least until ORM 3.0 is released, ensuring
compatibility with the latest PHP and providing bugfixes, but it will
no longer ship any new features.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/common/releases/tag/v2.9.0">visit GitHub</a>.</p>
<h3>DBAL 2.8.0</h3>
<p>DBAL 2.8.0 is a minor release of Doctrine DBAL that aggregates over
30 fixes and improvements developed over the last 3 months.</p>
<p>The dependency on <code>doctrine/common</code> is removed. DBAL now
depends on <code>doctrine/cache</code> and <code>doctrine/event-manager</code> instead.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/dbal/releases/tag/v2.8.0">visit GitHub</a>.</p>
<h3>ORM 2.6.2</h3>
<p>ORM 2.6.2 comes as a regular bugfix release.</p>
<p>It no longer uses the long ago deprecated Lexer and Inflector from <code>doctrine/common</code>.</p>
<p>For complete release notes,
<a href="https://github.com/doctrine/doctrine2/releases/tag/v2.6.2">visit GitHub</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Website]]></title>
            <link href="https://staging.doctrine-project.org/2018/04/06/new-website.html"/>
            <updated>2018-04-06T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2018/04/06/new-website.html</id>
            <content type="html"><![CDATA[<p>In 2007 Doctrine got its first official website at
<a href="https://www.phpdoctrine.org/">phpdoctrine.org</a>. Before that, the
website was an instance of <a href="https://trac.edgewall.org/">Trac</a> which also
served as our documentation, issue tracker and project management tool.</p>
<p>The new website design was created by <a href="https://phuson.com/">Phu Son
Nguyen</a> who worked at Yahoo! at the time. It was a
huge step forward for the Doctrine Project and it gave us 10 solid
years!</p>
<p>Fast-forward and today we are happy to be launching a new foundation for
our website and documentation. In addition to the new look, here are
some new features:</p>
<ul>
<li>GitHub Edit links on all documentation pages to make it easy to
contribute fixes when you come across something that could be
improved.</li>
<li>Automated deploys with GitHub Pages. Simply create a pull request
and it will be deployed to
<a href="https://staging.doctrine-project.org">https://staging.doctrine-project.org</a>.
Merges to master automatically deploy to
<a href="https://www.doctrine-project.org">https://www.doctrine-project.org</a>.</li>
<li>Search powered by <a href="https://www.algolia.com/">Algolia</a>.</li>
<li>Mobile friendly.</li>
<li>Documentation supports multiple versions.</li>
<li>Documentation user experience improvements.</li>
<li>HTTPS</li>
</ul>
<p>We hope that this helps improve the experience and make it easier to
contribute. The code for the site is open source and can be found
<a href="https://github.com/doctrine/doctrine-website/">here</a>. If you want to
contribute to the documentation for a project, you can find the docs in
a folder named <code>/docs</code> in the root of the project repository.
<a href="https://github.com/doctrine/doctrine2/tree/master/docs">Here</a> is the
ORM for example.</p>
<p>If you discover any issues, please report them on the <a href="https://github.com/doctrine/doctrine-website/issues">GitHub
Issue</a> tracker for
the project.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine ORM 2.6 and Next (3.0)]]></title>
            <link href="https://staging.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html"/>
            <updated>2017-12-21T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2017/12/21/orm-2-6-0-and-next.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine ORM <a href="https://github.com/doctrine/doctrine2/releases/tag/v2.6.0">2.6.0</a>.</p>
<h1>ORM 2.6.0</h1>
<p>This release contains almost 3 years of active development and it
provides several improvements and fixes, including:</p>
<ul>
<li>Better commit order calculation</li>
<li>More stable second level cache</li>
<li>Strict testing and quality control</li>
<li>PHP 7.1+ requirement</li>
</ul>
<p><a href="https://github.com/doctrine/doctrine2/releases/tag/v2.6.0">changelog</a>.</p>
<h1>Next?</h1>
<p>This release marks the feature freeze of the 2.x version.</p>
<p>If you need to improve please work on the develop branch that will
become the 3.0 branch in the coming days. The changes are already too
numerous to easily rebase a feature from the 2.x branch to the develop
one.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.2.0 and 1.1.7 Released]]></title>
            <link href="https://staging.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7.html"/>
            <updated>2017-10-24T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
ODM <a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.2.0">1.2.0</a>
and <a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.7">1.1.7</a>.</p>
<h1>MongoDB ODM 1.1.7</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/1.1.x/CHANGELOG-1.1.md#117-2017-10-23">changelog</a>.
A full list of issues and pull requests included in this release may be
found in the <a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.1.7">1.1.7
milestone</a>.</p>
<h1>What is new in 1.2.0?</h1>
<p>Doctrine MongoDB ODM 1.2.0 introduces the following new features:</p>
<ul>
<li>The <code>readOnly</code> mapping option allows you to map immutable documents.</li>
<li>With <code>slaveOkay</code> being deprecated, you can now specify a
<code>readPreference</code> for your documents. This <code>readPreference</code> will
automatically be applied to all queries for those mapped documents.</li>
<li>With <code>dbRef</code> only offering limited support in aggregation pipeline
queries, there's a new reference storage strategy called <code>ref</code> that
stores references as objects (without &quot;\$&quot;-prefixed field names),
allowing you to use it with discriminators and aggregation pipeline
queries.</li>
<li>When mapping inverse references, you may now specify fields that
will be primed when the reference is resolved. This saves you from
writing a dedicated repository method for the sole purpose of
priming references.</li>
<li>The <code>odm:schema:validate</code> command validates the document mapping to
help you spot mistakes.</li>
<li>A new builder for aggregation pipeline queries, including support
for marshalling results into read-only documents.</li>
<li>Query result documents that can be used to hydrate results from an
aggregation pipeline query. These documents cannot be written back
to the database.</li>
</ul>
<h1>Upgrading to 1.2.0</h1>
<p>The new version requires PHP 5.6. Running on PHP 7+ requires the use of
a polyfill for the legacy driver, e.g.
<a href="https://github.com/alcaeus/mongo-php-adapter">mongo-php-adapter</a>. When
running on PHP 5.6, MongoDB ODM requires version 1.6.7 or newer of the
legacy MongoDB driver.</p>
<p>Several features have been deprecated in this release and will be
dropped in the 2.0 release. To see this, please view the <a href="https://github.com/doctrine/mongodb-odm/blob/1.2.x/UPGRADE-1.2.md">UPGRADE
document</a>.</p>
<h1>Installation</h1>
<p>You can install the new version of MongoDB ODM by using Composer and the
following <code>composer.json</code> contents:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/mongodb-odm": "^1.2.0"
    }
}</code></pre>
<h1>Stability and upcoming releases</h1>
<p>As of today, Doctrine MongoDB ODM <code>1.2.0</code> is the stable distribution.
There is no release schedule for an upcoming version yet.</p>
<p><code>1.1.7</code> is the last release of the <code>1.1.x</code> development line and will no
longer receive bug fixes. Instead, we will focus on developing MongoDB
ODM 2.0 with native support for the new MongoDB driver. This release
will require at least PHP 7.1 and contain several BC breaking changes.
To ease the migration process, we will release a <code>1.3.0</code> which will be
backwards compatible to the <code>1.2.x</code> line and only deprecate features to
be removed in 2.0. The <code>1.x</code> line of MongoDB ODM will not receive any
new features.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 7.1 requirement for Doctrine packages]]></title>
            <link href="https://staging.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html"/>
            <updated>2017-07-25T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2017/07/25/php-7.1-requirement-and-composer.html</id>
            <content type="html"><![CDATA[<p>A few days ago, the Doctrine team released new versions of many
packages, dropping support for PHP 5.6 and 7.0, as well as HHVM. The
affected packages are:</p>
<ul>
<li>doctrine/common 2.8.0</li>
<li>doctrine/dbal 2.6.0</li>
<li>doctrine/collections 1.5.0</li>
<li>doctrine/inflector 1.2.0</li>
<li>doctrine/cache 1.7.0</li>
<li>doctrine/instantiator 1.1.0</li>
<li>doctrine/annotations 1.5.0</li>
</ul>
<p>Since many people are encountering issues with these updates, here are a
few suggestions to ensure your code continues working as usual.</p>
<h1>Composer version constraints</h1>
<p>Chances are your version constraints in <code>composer.json</code> look something
like this:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/orm": "^2.5"
    }
}</code></pre>
<p>The <code>^2.5</code> constraint resolves to: <code>&gt;= 2.5.0 &amp;&amp; &lt;= 2.999999.999999</code>.
This is intended: our projects all follow <a href="http://semver.org/">Semantic
Versioning</a>, so you can safely install a new minor
version without having to fear BC breaks.</p>
<p>When determining what version to install, composer employs a SAT solver
to make sure all dependencies are fulfilled. In our example above, the
SAT solver finds a version newer than 2.5 that satisfies all
requirements.</p>
<h1>Making sure you get a compatible version</h1>
<p>When you run <code>composer update</code> the next time, you'll automatically
receive updates for the packages mentioned above, provided that you are
running on PHP 7.1. If you are running an older PHP version, composer
will not install a version that requires PHP 7.1, since its requirements
are not fulfilled.</p>
<p>A common problem is people running a newer PHP version on their
developer machines than on their production servers. In this case,
running <code>composer update</code> on a developer machine (with PHP 7.1) might
happily pull in an update that simply won't work when deployed on a
production machine running PHP 5.6.</p>
<p>To make sure this doesn't happen to you, there are two choices:</p>
<ul>
<li>run <code>composer update</code> on a machine with the same PHP version that
you use in production</li>
<li>use the
<a href="https://getcomposer.org/doc/06-config.md#platform">platform.config</a>
config setting in <code>composer.json</code> to override your local PHP
version.</li>
</ul>
<h1>Why dropping PHP support in a minor version is not a BC break</h1>
<p>One question we frequently hear is, &quot;isn't dropping support for a PHP
version a BC break&quot;? In a nutshell, no. A BC break happens when there is
an incompatible change that your package manager can't handle. For
example, changing a method signature in a minor version is a no-go,
since the composer version constraints mentioned above assume any minor
upgrade can safely be used.</p>
<p>However, when we drop support for an older version of PHP, composer will
not consider the new version if the PHP version requirement is no longer
fulfilled. Thus, you won't end up with a fatal error due to a wrong
method signature, you just won't get the new version.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB 1.4.0]]></title>
            <link href="https://staging.doctrine-project.org/2016/11/22/doctrine-mongodb-release-1.4.0.html"/>
            <updated>2016-11-22T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2016/11/22/doctrine-mongodb-release-1.4.0.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
Abstraction Layer
<a href="https://github.com/doctrine/mongodb/releases/tag/1.4.0">1.4.0</a>.</p>
<h1>Passing context options to the driver</h1>
<p>With this release it's possible to pass driver options to the connection
class, which will then be passed on to the MongoDB driver. For example,
to pass a stream context with SSL context options, you could use the
following code snippet:</p>
<pre><code class="language-{.sourceCode .php}">$context = stream_context_create([
    'ssl' =&gt; [
        'allow_self_signed' =&gt; false,
    ]
]);
$connection = new \Doctrine\MongoDB\Connection(null, [], null, null, ['context' =&gt; $context]);</code></pre>
<h1>Passing multiple expressions to logical operators</h1>
<p>The <code>addAnd</code>, <code>addNor</code> and <code>addOr</code> methods in the query and aggregation
builders now take multiple expression objects. Instead of having to call
the method repeatedly, you may call it once with multiple arguments:</p>
<pre><code class="language-{.sourceCode .php}">// Before
$builder
    -&gt;addAnd($someExpression)
    -&gt;addAnd($otherExpression);

// After
$builder-&gt;addAnd($someExpression, $otherExpression);</code></pre>
<h1>Deprecations</h1>
<p>The <code>update</code> and <code>multiple</code> methods in the query have been deprecated in
favor of <code>updateOne</code> and <code>updateMany</code>. These deprecations help people
using ODM prepare for the next version of ODM which will utilize the new
MongoDB library API.</p>
<h1>Bug fixes in this release</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb/blob/master/CHANGELOG-1.4.md#140-2016-11-22">changelog</a>.
A full list of issues and pull requests included in this release may be
found in the <a href="https://github.com/doctrine/mongodb/issues?q=milestone%3A1.4.0">1.4.0
milestone</a>.</p>
<h1>PHP version support</h1>
<p>With this release, we have dropped support for PHP 5.5. Users using PHP
5.5 or older are encouraged to upgrade to a newer PHP version. If you
are using PHP 7.0 or 7.1, you can use this library by adding a polyfill
for <code>ext-mongo</code>, like
<a href="https://github.com/alcaeus/mongo-php-adapter">mongo-php-adapter</a>.</p>
<h1>Future releases</h1>
<p>This release is the last planned minor release of the MongoDB
Abstraction Layer, with only bugfixes being done in maintenance
releases. The library will not be rewritten to support the new MongoDB
driver. Users are encouraged to use the new <a href="https://github.com/mongodb/mongo-php-library">MongoDB
library</a>. Doctrine
MongoDB ODM will be adapted to support the new driver and the MongoDB
library.</p>
<h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code>
definitions:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/mongodb": "^1.4.0"
    }
}</code></pre>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.1.2 and 1.0.8 released]]></title>
            <link href="https://staging.doctrine-project.org/2016/10/07/doctrine-mongodb-odm-release-1.1.2-and-1.0.8.html"/>
            <updated>2016-10-07T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2016/10/07/doctrine-mongodb-odm-release-1.1.2-and-1.0.8.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.2">1.1.2</a>
and
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.0.8">1.0.8</a>.</p>
<h1>MongoDB ODM 1.0.8</h1>
<ul>
<li>calling <code>dropCollections()</code> in the SchemaManager did not drop GridFS
collections. <a href="https://github.com/doctrine/mongodb-odm/pull/1468">#1468</a></li>
<li>calling <code>clear()</code> on an uninitialized collection with <code>orphanRemoval</code>
enabled failed to remove orphaned documents.
<a href="https://github.com/doctrine/mongodb-odm/pull/1500">#1500</a> - Documents
with identifiers evaluating to <code>false</code> (e.g. empty string or 0) could
not be reference using <code>createDBRef()</code> in DocumentManager.
<a href="https://github.com/doctrine/mongodb-odm/pull/1503">#1503</a></li>
</ul>
<h1>MongoDB ODM 1.1.2</h1>
<ul>
<li>
<p>This release contains the bugfixes outlined for ODM 1.0.8 above</p>
</li>
<li>
<p>Querying for referenced objects in <code>findBy()</code> or <code>findOneBy()</code> did not
work properly due to incorrect preparation of the DBRef objects.
<a href="https://github.com/doctrine/mongodb-odm/pull/1481">#1481</a></p>
</li>
</ul>
<h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code>
definitions:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/mongodb-odm": "^1.1.2"
    }
}</code></pre>
<h1>Support for Doctrine ODM 1.0.x</h1>
<p>As outlined previously, support for MongoDB ODM 1.0.x will end on
December 9th, 2016. If you have not upgraded to version 1.1 yet, please
do so to receive future bug fixes.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine ORM 2.5.5 Released]]></title>
            <link href="https://staging.doctrine-project.org/2016/09/10/orm-2-5-5.html"/>
            <updated>2016-09-10T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2016/09/10/orm-2-5-5.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine ORM
<a href="https://github.com/doctrine/doctrine2/releases/tag/v2.5.5">2.5.5</a>.</p>
<p>Following issues were fixed:</p>
<blockquote>
<ul>
<li>Embeddable classes are now allowed in inheritance trees
<a href="https://github.com/doctrine/doctrine2/issues/4097">#4097</a></li>
<li>Removed some object hash collisions caused by entity merging
<a href="https://github.com/doctrine/doctrine2/pull/1465">#1465</a></li>
<li>Allowed usage of mathematical operators in DQL <code>HAVING</code> clauses
<a href="https://github.com/doctrine/doctrine2/pull/5598">#5598</a></li>
<li>Fixed cloning of proxies with private properties at multiple
inheritance levels
<a href="https://github.com/doctrine/doctrine2/pull/5755">#5755</a></li>
<li>Entity insertions are correctly cleared when a specific entity is
to be cleared
<a href="https://github.com/doctrine/doctrine2/issues/5849">#5849</a></li>
<li>Corrected hydration of fetch-joins that use composite keys
<a href="https://github.com/doctrine/doctrine2/issues/5762">#5762</a></li>
<li>Metadata exporters now only export the owning side metadata in a
one-to-one relation
<a href="https://github.com/doctrine/doctrine2/issues/5858">#5858</a></li>
<li>Corrected hydration of JTI entities when <code>NULL</code> is retrieved for a
<code>simple_array</code> or <code>json_array</code> field
<a href="https://github.com/doctrine/doctrine2/issues/5989">#5989</a></li>
<li>Correctly expire L2 cache query caches, based on entity region
cache timestamp
<a href="https://github.com/doctrine/doctrine2/issues/6001">#6001</a></li>
</ul>
</blockquote>
<h1>Installation</h1>
<p>You can install the ORM component using Composer:</p>
<pre><code class="language-{.sourceCode .shell}">composer require doctrine/orm:^2.5.5</code></pre>
<p>Please report any issues you may have with the update on the <a href="https://github.com/doctrine/doctrine2/issues">issue
tracker</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine DBAL 2.5.5 Released]]></title>
            <link href="https://staging.doctrine-project.org/2016/09/09/dbal-2-5-5.html"/>
            <updated>2016-09-09T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2016/09/09/dbal-2-5-5.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine DBAL
<a href="https://github.com/doctrine/dbal/releases/tag/v2.5.5">2.5.5</a>.</p>
<p>This release contains a huge amount of fixes, specifically:</p>
<blockquote>
<ul>
<li>Parsing of SQL strings containing single quotes
<a href="https://github.com/doctrine/common/pull/842">#842</a></li>
<li>Listing foreign key names when no DB name is used (use current DB
instead) <a href="https://github.com/doctrine/common/pull/856">#856</a></li>
<li>Verifying if table names correspond on dropped foreign keys
<a href="https://github.com/doctrine/common/pull/861">#861</a></li>
<li>Quoting identifiers in <code>DROP</code> DDL statements
<a href="https://github.com/doctrine/common/pull/862">#862</a></li>
<li>Removing leading slash from database/schema names when using DSNs
<a href="https://github.com/doctrine/common/pull/863">#863</a></li>
<li>Stopped using <code>template1</code> as default database in Postgres
<a href="https://github.com/doctrine/common/pull/2279">#2279</a></li>
<li>Allowing <code>"path"</code> instead of <code>"dbname"</code> in SQLite connections
<a href="https://github.com/doctrine/common/pull/2267">#2267</a></li>
<li>Correcting DB2 boolean columns schema introspection
<a href="https://github.com/doctrine/common/pull/2277">#2277</a></li>
<li>Correcting OCI8 parameter binding, which was broken by upgrading
to PHP 7.0 <a href="https://github.com/doctrine/common/pull/2434">#2434</a></li>
<li>Quoting reserved table names when using <code>TRUNCATE</code>
<a href="https://github.com/doctrine/common/pull/2270">#2270</a></li>
<li>Fixing of DSN parsing when no schema is in the path
<a href="https://github.com/doctrine/common/pull/2287">#2287</a></li>
<li>Correcting query builder, which was adding a <code>FROM</code> clause even
with no arguments for it
<a href="https://github.com/doctrine/common/pull/2292">#2292</a></li>
<li>Correcting altering primary key with <code>AUTO_INCREMENT</code> on MySQL
(requires dropping/re-adding PK)
<a href="https://github.com/doctrine/common/pull/2303">#2303</a></li>
<li>Moving DB2 pagination (query modification) offset/limit count
result to the end of the results
<a href="https://github.com/doctrine/common/pull/2310">#2310</a></li>
<li>Handling <code>Throwable</code> exceptions thrown in
<code>Connection#transactional()</code>
<a href="https://github.com/doctrine/common/pull/2390">#2390</a></li>
<li>Correcting logging of parameters passed to a statement via
<code>bindParam()</code>
<a href="https://github.com/doctrine/common/pull/2440">#2440</a></li>
<li>Allowing installation of <code>symfony/console:^3.0</code>
<a href="https://github.com/doctrine/common/pull/2484">#2484</a></li>
<li>Correcing MySQLi statements, which were returning <code>null</code> instead
of <code>false</code> on no results
<a href="https://github.com/doctrine/common/pull/2497">#2497</a></li>
</ul>
</blockquote>
<h1>Installation</h1>
<p>You can install the DBAL component using Composer:</p>
<pre><code class="language-{.sourceCode .shell}">composer require doctrine/dbal:^2.5.5</code></pre>
<p>Please report any issues you may have with the update on the <a href="https://github.com/doctrine/dbal/issues">issue
tracker</a>.</p>]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM release 1.1.1 ]]></title>
            <link href="https://staging.doctrine-project.org/2016/07/27/doctrine-mongodb-odm-release-1.1.1.html"/>
            <updated>2016-07-27T00:00:00+00:00</updated>
            <id>https://staging.doctrine-project.org/2016/07/27/doctrine-mongodb-odm-release-1.1.1.html</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.1">1.1.1</a>.</p>
<h1>Bug fixes in this release</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/master/CHANGELOG-1.1.md#111-2016-07-27">changelog</a>.
A full list of issues and pull requests included in this release may be
found in the <a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.1.1">1.1.1
milestone</a>.</p>
<h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code>
definitions:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/mongodb-odm": "^1.1.1"
    }
}</code></pre>
<h1>Future Releases</h1>
<p>Work on the much anticipated 2.0 version of MongoDB ODM with support for
the new MongoDB driver is beginning; however we are unable to set a
release date yet. Development will likely take some time and thus we
have scheduled a 1.2 version to be released before 2.0. Version 1.2 will
include all features planned for 2.0 that can be introduced in a
backward compatible way as well as new deprecation notices for
functionality we plan to remove in 2.0, which we hope will ease future
migration.</p>
<h1>Doctrine MongoDB ODM release 1.0.7</h1>
<p>We are also happy to announce the immediate availability of Doctrine
MongoDB ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.0.7">1.0.7</a>.</p>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/master/CHANGELOG-1.0.md#107-2016-07-27">changelog</a>.
A full list of issues and pull requests included in this release may be
found in the <a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.0.7">1.0.7
milestone</a>.</p>
<p>You can install the latest version using the following <code>composer.json</code>
definitions:</p>
<pre><code class="language-{.sourceCode .json}">{
    "require": {
        "doctrine/mongodb-odm": "^1.0.7"
    }
}</code></pre>]]></content>
        </entry>
    </feed>
