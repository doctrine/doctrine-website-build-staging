<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Doctrine]]></title>
    <link href="https://staging.doctrine-project.org/atom.xml" rel="self"/>
    <link href="https://staging.doctrine-project.org/"/>
    <updated>2018-04-02T23:20:40-04:00</updated>
    <id>https://staging.doctrine-project.org/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Doctrine ORM 2.6 and Next (3.0)]]></title>
            <link href="https://staging.doctrine-project.org/2017/12/21/orm-2-6-0-and-next/"/>
            <updated>2017-12-21T00:00:00-05:00</updated>
            <id>https://staging.doctrine-project.org/2017/12/21/orm-2-6-0-and-next/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine ORM 2.6
`2.6.0 &lt;https://github.com/doctrine/doctrine2/releases/tag/v2.6.0&gt;`.</p>
<a id="title.1"></a><h1>ORM 2.6.0</h1>
<p>This release contains almost 3 years of active development and it provides several improvements and fixes, including:</p>
<ul><li class="dash">Better commit order calculation</li>
<li class="dash">More stable second level cache</li>
<li class="dash">Strict testing and quality control</li>
<li class="dash">PHP 7.1+ requirement</li>
</ul>

<p><a href="https://github.com/doctrine/doctrine2/releases/tag/v2.6.0">changelog</a>.</p>
<a id="title.2"></a><h1>Next?</h1>
<p>This release marks the feature freeze of the 2.x version.</p>
<p>If you need to improve please work on the develop branch that will become the 3.0 branch in the coming days.
The changes are already too numerous to easily rebase a feature from the 2.x branch to the develop one.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.2.0 and 1.1.7 Released]]></title>
            <link href="https://staging.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7/"/>
            <updated>2017-10-24T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2017/10/24/odm-1-2-0-and-1-1-7/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.2.0">1.2.0</a> and
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.7">1.1.7</a>.</p>
<a id="title.1"></a><h1>MongoDB ODM 1.1.7</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/1.1.x/CHANGELOG-1.1.md#117-2017-10-23">changelog</a>.
A full list of issues and pull requests included in this release may be found in the
<a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.1.7">1.1.7 milestone</a>.</p>
<a id="title.2"></a><h1>What is new in 1.2.0?</h1>
<p>Doctrine MongoDB ODM 1.2.0 introduces the following new features:</p>
<ul><li class="dash">The <code>readOnly</code> mapping option allows you to map immutable documents.</li>
<li class="dash">With <code>slaveOkay</code> being deprecated, you can now specify a <code>readPreference</code>
  for your documents. This <code>readPreference</code> will automatically be applied to
  all queries for those mapped documents.</li>
<li class="dash">With <code>dbRef</code> only offering limited support in aggregation pipeline queries,
  there's a new reference storage strategy called <code>ref</code> that stores references
  as objects (without &quot;$&quot;-prefixed field names), allowing you to use it with
  discriminators and aggregation pipeline queries.</li>
<li class="dash">When mapping inverse references, you may now specify fields that will be
  primed when the reference is resolved. This saves you from writing a dedicated
  repository method for the sole purpose of priming references.</li>
<li class="dash">The <code>odm:schema:validate</code> command validates the document mapping to help you
  spot mistakes.</li>
<li class="dash">A new builder for aggregation pipeline queries, including support for
  marshalling results into read-only documents.</li>
<li class="dash">Query result documents that can be used to hydrate results from an aggregation
  pipeline query. These documents cannot be written back to the database.</li>
</ul>

<a id="title.3"></a><h1>Upgrading to 1.2.0</h1>
<p>The new version requires PHP 5.6. Running on PHP 7+ requires the use of a
polyfill for the legacy driver, e.g. <a href="https://github.com/alcaeus/mongo-php-adapter">mongo-php-adapter</a>.
When running on PHP 5.6, MongoDB ODM requires version 1.6.7 or newer of the
legacy MongoDB driver.</p>
<p>Several features have been deprecated in this release and will be dropped in the
2.0 release. To see this, please view the <a href="https://github.com/doctrine/mongodb-odm/blob/1.2.x/UPGRADE-1.2.md">UPGRADE document</a>.</p>
<a id="title.4"></a><h1>Installation</h1>
<p>You can install the new version of MongoDB ODM by using Composer and the
following <code>composer.json</code> contents:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/mongodb-odm&quot;: &quot;^1.2.0&quot;
    }
}
</code></pre>
<a id="title.5"></a><h1>Stability and upcoming releases</h1>
<p>As of today, Doctrine MongoDB ODM <code>1.2.0</code> is the stable distribution. There is
no release schedule for an upcoming version yet.</p>
<p><code>1.1.7</code> is the last release of the <code>1.1.x</code> development line and will no
longer receive bug fixes. Instead, we will focus on developing MongoDB ODM 2.0
with native support for the new MongoDB driver. This release will require at
least PHP 7.1 and contain several BC breaking changes. To ease the migration
process, we will release a <code>1.3.0</code> which will be backwards compatible to
the <code>1.2.x</code> line and only deprecate features to be removed in 2.0. The <code>1.x</code>
line of MongoDB ODM will not receive any new features.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP 7.1 requirement for Doctrine packages]]></title>
            <link href="https://staging.doctrine-project.org/2017/07/25/php-7/"/>
            <updated>2017-07-25T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2017/07/25/php-7/</id>
            <content type="html"><![CDATA[<p>A few days ago, the Doctrine team released new versions of many packages, dropping
support for PHP 5.6 and 7.0, as well as HHVM. The affected packages are:</p>
<ul><li class="dash">doctrine/common 2.8.0</li>
<li class="dash">doctrine/dbal 2.6.0</li>
<li class="dash">doctrine/collections 1.5.0</li>
<li class="dash">doctrine/inflector 1.2.0</li>
<li class="dash">doctrine/cache 1.7.0</li>
<li class="dash">doctrine/instantiator 1.1.0</li>
<li class="dash">doctrine/annotations 1.5.0</li>
</ul>

<p>Since many people are encountering issues with these updates, here are a few
suggestions to ensure your code continues working as usual.</p>
<a id="title.1"></a><h1>Composer version constraints</h1>
<p>Chances are your version constraints in <code>composer.json</code> look something like this:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/orm&quot;: &quot;^2.5&quot;
    }
}
</code></pre>
<p>The <code>^2.5</code> constraint resolves to: <code>&gt;= 2.5.0 &amp;&amp; &lt;= 2.999999.999999</code>. This is
intended: our projects all follow <a href="http://semver.org/">Semantic Versioning</a>,
so you can safely install a new minor version without having to fear BC breaks.</p>
<p>When determining what version to install, composer employs a SAT solver to make
sure all dependencies are fulfilled. In our example above, the SAT solver finds
a version newer than 2.5 that satisfies all requirements.</p>
<a id="title.2"></a><h1>Making sure you get a compatible version</h1>
<p>When you run <code>composer update</code> the next time, you'll automatically receive
updates for the packages mentioned above, provided that you are running on PHP
7.1. If you are running an older PHP version, composer will not install a version
that requires PHP 7.1, since its requirements are not fulfilled.</p>
<p>A common problem is people running a newer PHP version on their developer machines
than on their production servers. In this case, running <code>composer update</code> on
a developer machine (with PHP 7.1) might happily pull in an update that simply
won't work when deployed on a production machine running PHP 5.6.</p>
<p>To make sure this doesn't happen to you, there are two choices:</p>
<ul><li class="dash"> run <code>composer update</code> on a machine with the same PHP version that you use
   in production</li>
<li class="dash"> use the <a href="https://getcomposer.org/doc/06-config.md#platform">platform.config</a>
   config setting in <code>composer.json</code> to override your local PHP version.</li>
</ul>

<a id="title.3"></a><h1>Why dropping PHP support in a minor version is not a BC break</h1>
<p>One question we frequently hear is, &quot;isn't dropping support for a PHP version a
BC break&quot;? In a nutshell, no. A BC break happens when there is an incompatible
change that your package manager can't handle. For example, changing a method
signature in a minor version is a no-go, since the composer version constraints
mentioned above assume any minor upgrade can safely be used.</p>
<p>However, when we drop support for an older version of PHP, composer will not
consider the new version if the PHP version requirement is no longer fulfilled.
Thus, you won't end up with a fatal error due to a wrong method signature, you
just won't get the new version.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Announcing Doctrine 4]]></title>
            <link href="https://staging.doctrine-project.org/2017/04/01/announcing-doctrine-4/"/>
            <updated>2017-04-01T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2017/04/01/announcing-doctrine-4/</id>
            <content type="html"><![CDATA[<div class="alert note bg-light-yellow text-dark border"><i class="fas fa-sticky-note text-primary mr-2"></i><p>This article is an April Fools joke.</p>
</div>
<p>It has been few months since we shed some light on the <a href="https://github.com/doctrine/doctrine2/issues/6211">future of Doctrine project</a>
and had an extensive insight into what <a href="https://twitter.com/guilhermeblanco">Guilherme</a> had been up to. Adding
tens of megabytes of IRC logs of internal discussion we felt we owe you an update on where Doctrine is and where
it's heading to:</p>
<a id="title.1"></a><h1>Doctrine 3 Is No More!</h1>
<p>Rest assured, we are in no way ditching all the code Guilherme hacked so far or any of the ideas that sprung
for the next major release. We are still looking into leveraging all goodies that were given to us with PHP 7.
We want the next Doctrine version to be an extremely stable and reliable piece of software. We are also still trying to figure out how to maintain all projects under Doctrine's umbrella effectively. To recap,
Doctrine is not only the ORM you all know, we are also maintaining a number of ODM projects (<a href="https://github.com/doctrine/mongodb-odm">MongoDB</a>
and <a href="https://github.com/doctrine/couchdb-odm">CouchDB</a> to name few) which all share basic concepts and code.
Some of them also face a major rewrite, like the much anticipated MongoDB ODM 2.0 with support for new MongoDB driver.</p>
<a id="title.2"></a><h1>Joining Forces</h1>
<p>Instead of having each team work independently and implement the same concepts multiple times across various libraries,
we decided it's for the best if we all work on one project and make it as good and robust as possible.
In the spirit of breaking boundaries, Doctrine 4 will be all about interoperability. <strong>Doctrine 4 will support
both RDBMS and NoSQL databases at the same time!</strong></p>
<a id="title.3"></a><h1>Following Latest Trends</h1>
<p>A really big thing we want to (re)introduce is an Active Record pattern. We recently ran a poll on the #doctrine IRC
channel and it turned out that 68% of developers die a little bit each time they inject a service, which
barely saves data to a database anyway, and miss the simplicity of having an entity save itself.</p>
<pre><code class="php">use Doctrine;

/**
 * @Doctrine\Entity(storage=&quot;MSSql&quot;)
 * @Doctrine\ActiveRecord
 */
class User
{
    /** @Doctrine\Id */
    public $id;

    /** @Doctrine\Field(type=&quot;string&quot;) */
    public $login;
}

$user = new User();
$user-&gt;load(10);
$user-&gt;login = 'malarzm';
$user-&gt;save();
</code></pre>
<p>Thanks to the <code>@Doctrine\ActiveRecord</code> annotation you're able to query for and save your entities easily. Please
notice that the `User` class does not extend any internal Doctrine class - you are still decoupled from the ORM!</p>
<p>We strongly believe that getting back to the Active Record pattern is the way to go for us. We weren't able to
fully get rid of the old fashioned Data Mapper pattern but you can expect its deprecation in one of first bug-fix releases
and full removal in a subsequent patch release (Active Record is replacing semantic versioning, too!)</p>
<p>Another big step towards the highly expected Developer eXperience was initially painful, as it required many
of us to come out of the Java bubble we live in, but we know it will be for the best. With the re-introduction of
Active Record the obvious next step is making all Doctrine utilities available in an easy and sane way: please welcome
static registries AND short method names!</p>
<pre><code class="php">use Doctrine;
use Entity\MongoLog;
use Entity\User;

Doctrine::em()-&gt;start(); // start a transaction
$user = new User(); // this is stored in MSSql
$user = 'malarzm';
$user-&gt;save(); // not saved yet
$log = new MongoLog($user, 'was created'); // this will be &quot;stored&quot; in MongoDB
$log-&gt;save(); // but not yet
Doctrine::em()-&gt;commit(); // commit a transaction ACROSS multiple storage engines
</code></pre>
<p>Big shout out goes to <a href="https://twitter.com/Ocramius">Marco</a>. Although he initially had a heart attack when first
hearing about this idea, he's come full circle after using the feature and is now a big proponent of static registries. Be sure
to watch for updates to all of his libraries in the near future!</p>
<a id="title.4"></a><h1>Try It Out Now!</h1>
<p>Uniting forces of all Doctrine developers has enabled us to ship an usable &quot;alpha&quot; version way sooner than originally
anticipated. But the truly thrilling news is that thanks to tremendous help from guys with <a href="https://3v4l.org/">3v4l.org</a>
we have set up a sandbox environment so everybody can have a hands-on experience using the new version of Doctrine:
please visit <a href="https://ocrami.us/">3v4l.org/doctrine4</a> and share your thoughts in the comments section below!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB 1.4.0]]></title>
            <link href="https://staging.doctrine-project.org/2016/11/22/doctrine-mongodb-release-1.4/"/>
            <updated>2016-11-22T00:00:00-05:00</updated>
            <id>https://staging.doctrine-project.org/2016/11/22/doctrine-mongodb-release-1.4/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB
Abstraction Layer <a href="https://github.com/doctrine/mongodb/releases/tag/1.4.0">1.4.0</a>.</p>
<a id="title.1"></a><h1>Passing context options to the driver</h1>
<p>With this release it's possible to pass driver options to the connection class,
which will then be passed on to the MongoDB driver. For example, to pass a
stream context with SSL context options, you could use the following code
snippet:</p>
<pre><code class="php">$context = stream_context_create([
    'ssl' =&gt; [
        'allow_self_signed' =&gt; false,
    ]
]);
$connection = new \Doctrine\MongoDB\Connection(null, [], null, null, ['context' =&gt; $context]);
</code></pre>
<a id="title.2"></a><h1>Passing multiple expressions to logical operators</h1>
<p>The <code>addAnd</code>, <code>addNor</code> and <code>addOr</code> methods in the query and aggregation
builders now take multiple expression objects. Instead of having to call the
method repeatedly, you may call it once with multiple arguments:</p>
<pre><code class="php">// Before
$builder
    -&gt;addAnd($someExpression)
    -&gt;addAnd($otherExpression);

// After
$builder-&gt;addAnd($someExpression, $otherExpression);
</code></pre>
<a id="title.3"></a><h1>Deprecations</h1>
<p>The <code>update</code> and <code>multiple</code> methods in the query have been deprecated in
favor of <code>updateOne</code> and <code>updateMany</code>. These deprecations help people using
ODM prepare for the next version of ODM which will utilize the new MongoDB
library API.</p>
<a id="title.4"></a><h1>Bug fixes in this release</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb/blob/master/CHANGELOG-1.4.md#140-2016-11-22">changelog</a>.
A full list of issues and pull requests included in this release may be found in the
<a href="https://github.com/doctrine/mongodb/issues?q=milestone%3A1.4.0">1.4.0 milestone</a>.</p>
<a id="title.5"></a><h1>PHP version support</h1>
<p>With this release, we have dropped support for PHP 5.5. Users using PHP 5.5 or
older are encouraged to upgrade to a newer PHP version. If you are using PHP 7.0
or 7.1, you can use this library by adding a polyfill for <code>ext-mongo</code>, like
<a href="https://github.com/alcaeus/mongo-php-adapter">mongo-php-adapter</a>.</p>
<a id="title.6"></a><h1>Future releases</h1>
<p>This release is the last planned minor release of the MongoDB Abstraction Layer,
with only bugfixes being done in maintenance releases. The library will not be
rewritten to support the new MongoDB driver. Users are encouraged to use the new
<a href="https://github.com/mongodb/mongo-php-library">MongoDB library</a>. Doctrine
MongoDB ODM will be adapted to support the new driver and the MongoDB library.</p>
<a id="title.7"></a><h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code> definitions:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/mongodb&quot;: &quot;^1.4.0&quot;
    }
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM 1.1.2 and 1.0.8 released]]></title>
            <link href="https://staging.doctrine-project.org/2016/10/07/doctrine-mongodb-odm-release-1.1.2-and-1.0/"/>
            <updated>2016-10-07T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2016/10/07/doctrine-mongodb-odm-release-1.1.2-and-1.0/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.2">1.1.2</a> and
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.0.8">1.0.8</a>.</p>
<a id="title.1"></a><h1>MongoDB ODM 1.0.8</h1>
<ul><li class="dash">calling <code>dropCollections()</code> in the SchemaManager did not drop GridFS
collections. <a href="https://github.com/doctrine/mongodb-odm/pull/1468">#1468</a></li>
<li class="dash">calling <code>clear()</code> on an uninitialized collection with <code>orphanRemoval</code>
enabled failed to remove orphaned documents. <a href="https://github.com/doctrine/mongodb-odm/pull/1500">#1500</a></li>
<li class="dash">Documents with identifiers evaluating to <code>false</code> (e.g. empty string or 0)
could not be reference using <code>createDBRef()</code> in DocumentManager. <a href="https://github.com/doctrine/mongodb-odm/pull/1503">#1503</a></li>
</ul>

<a id="title.2"></a><h1>MongoDB ODM 1.1.2</h1>
<ul><li class="dash">This release contains the bugfixes outlined for ODM 1.0.8 above</li>
<li class="dash">Querying for referenced objects in <code>findBy()</code> or <code>findOneBy()</code> did not work
properly due to incorrect preparation of the DBRef objects. <a href="https://github.com/doctrine/mongodb-odm/pull/1481">#1481</a></li>
</ul>

<a id="title.3"></a><h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code> definitions:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/mongodb-odm&quot;: &quot;^1.1.2&quot;
    }
}
</code></pre>
<a id="title.4"></a><h1>Support for Doctrine ODM 1.0.x</h1>
<p>As outlined previously, support for MongoDB ODM 1.0.x will end on December 9th,
2016. If you have not upgraded to version 1.1 yet, please do so to receive
future bug fixes.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine ORM 2.5.5 Released]]></title>
            <link href="https://staging.doctrine-project.org/2016/09/10/orm-2-5-5/"/>
            <updated>2016-09-10T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2016/09/10/orm-2-5-5/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine ORM
<a href="https://github.com/doctrine/doctrine2/releases/tag/v2.5.5">2.5.5</a>.</p>
<p>Following issues were fixed:</p>
<ul><li class="dash">Embeddable classes are now allowed in inheritance trees <a href="https://github.com/doctrine/doctrine2/issues/4097">#4097</a></li>
<li class="dash">Removed some object hash collisions caused by entity merging <a href="https://github.com/doctrine/doctrine2/pull/1465">#1465</a></li>
<li class="dash">Allowed usage of mathematical operators in DQL <code>HAVING</code> clauses <a href="https://github.com/doctrine/doctrine2/pull/5598">#5598</a></li>
<li class="dash">Fixed cloning of proxies with private properties at multiple inheritance levels <a href="https://github.com/doctrine/doctrine2/pull/5755">#5755</a></li>
<li class="dash">Entity insertions are correctly cleared when a specific entity is to be cleared <a href="https://github.com/doctrine/doctrine2/issues/5849">#5849</a></li>
<li class="dash">Corrected hydration of fetch-joins that use composite keys <a href="https://github.com/doctrine/doctrine2/issues/5762">#5762</a></li>
<li class="dash">Metadata exporters now only export the owning side metadata in a one-to-one relation <a href="https://github.com/doctrine/doctrine2/issues/5858">#5858</a></li>
<li class="dash">Corrected hydration of JTI entities when <code>NULL</code> is retrieved for a <code>simple_array</code> or <code>json_array</code> field <a href="https://github.com/doctrine/doctrine2/issues/5989">#5989</a></li>
<li class="dash">Correctly expire L2 cache query caches, based on entity region cache timestamp <a href="https://github.com/doctrine/doctrine2/issues/6001">#6001</a></li>
</ul>

<a id="title.1"></a><h1>Installation</h1>
<p>You can install the ORM component using Composer:</p>
<pre><code class="shell">composer require doctrine/orm:^2.5.5
</code></pre>
<p>Please report any issues you may have with the update on the
<a href="https://github.com/doctrine/doctrine2/issues">issue tracker</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine DBAL 2.5.5 Released]]></title>
            <link href="https://staging.doctrine-project.org/2016/09/09/dbal-2-5-5/"/>
            <updated>2016-09-09T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2016/09/09/dbal-2-5-5/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine DBAL
<a href="https://github.com/doctrine/dbal/releases/tag/v2.5.5">2.5.5</a>.</p>
<p>This release contains a huge amount of fixes, specifically:</p>
<ul><li class="dash">Parsing of SQL strings containing single quotes <a href="https://github.com/doctrine/common/pull/842">#842</a></li>
<li class="dash">Listing foreign key names when no DB name is used (use current DB instead) <a href="https://github.com/doctrine/common/pull/856">#856</a></li>
<li class="dash">Verifying if table names correspond on dropped foreign keys <a href="https://github.com/doctrine/common/pull/861">#861</a></li>
<li class="dash">Quoting identifiers in <code>DROP</code> DDL statements <a href="https://github.com/doctrine/common/pull/862">#862</a></li>
<li class="dash">Removing leading slash from database/schema names when using DSNs <a href="https://github.com/doctrine/common/pull/863">#863</a></li>
<li class="dash">Stopped using <code>template1</code> as default database in Postgres <a href="https://github.com/doctrine/common/pull/2279">#2279</a></li>
<li class="dash">Allowing <code>&quot;path&quot;</code> instead of <code>&quot;dbname&quot;</code> in SQLite connections <a href="https://github.com/doctrine/common/pull/2267">#2267</a></li>
<li class="dash">Correcting DB2 boolean columns schema introspection <a href="https://github.com/doctrine/common/pull/2277">#2277</a></li>
<li class="dash">Correcting OCI8 parameter binding, which was broken by upgrading to PHP 7.0 <a href="https://github.com/doctrine/common/pull/2434">#2434</a></li>
<li class="dash">Quoting reserved table names when using <code>TRUNCATE</code> <a href="https://github.com/doctrine/common/pull/2270">#2270</a></li>
<li class="dash">Fixing of DSN parsing when no schema is in the path <a href="https://github.com/doctrine/common/pull/2287">#2287</a></li>
<li class="dash">Correcting query builder, which was adding a <code>FROM</code> clause even with no arguments for it <a href="https://github.com/doctrine/common/pull/2292">#2292</a></li>
<li class="dash">Correcting altering primary key with <code>AUTO_INCREMENT</code> on MySQL (requires dropping/re-adding PK) <a href="https://github.com/doctrine/common/pull/2303">#2303</a></li>
<li class="dash">Moving DB2 pagination (query modification) offset/limit count result to the end of the results <a href="https://github.com/doctrine/common/pull/2310">#2310</a></li>
<li class="dash">Handling <code>Throwable</code> exceptions thrown in <code>Connection#transactional()</code> <a href="https://github.com/doctrine/common/pull/2390">#2390</a></li>
<li class="dash">Correcting logging of parameters passed to a statement via <code>bindParam()</code>  <a href="https://github.com/doctrine/common/pull/2440">#2440</a></li>
<li class="dash">Allowing installation of <code>symfony/console:^3.0</code> <a href="https://github.com/doctrine/common/pull/2484">#2484</a></li>
<li class="dash">Correcing MySQLi statements, which were returning <code>null</code> instead of <code>false</code> on no results <a href="https://github.com/doctrine/common/pull/2497">#2497</a></li>
</ul>

<a id="title.1"></a><h1>Installation</h1>
<p>You can install the DBAL component using Composer:</p>
<pre><code class="shell">composer require doctrine/dbal:^2.5.5
</code></pre>
<p>Please report any issues you may have with the update on the
<a href="https://github.com/doctrine/dbal/issues">issue tracker</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine MongoDB ODM release 1.1.1]]></title>
            <link href="https://staging.doctrine-project.org/2016/07/27/doctrine-mongodb-odm-release-1.1/"/>
            <updated>2016-07-27T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2016/07/27/doctrine-mongodb-odm-release-1.1/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine MongoDB ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.1.1">1.1.1</a>.</p>
<a id="title.1"></a><h1>Bug fixes in this release</h1>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/master/CHANGELOG-1.1.md#111-2016-07-27">changelog</a>.
A full list of issues and pull requests included in this release may be found in the
<a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.1.1">1.1.1 milestone</a>.</p>
<a id="title.2"></a><h1>Installation</h1>
<p>You can install the latest version using the following <code>composer.json</code> definitions:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/mongodb-odm&quot;: &quot;^1.1.1&quot;
    }
}
</code></pre>
<a id="title.3"></a><h1>Future Releases</h1>
<p>Work on the much anticipated 2.0 version of MongoDB ODM with support for the new MongoDB driver is
beginning; however we are unable to set a release date yet. Development will likely take some time
and thus we have scheduled a 1.2 version to be released before 2.0. Version 1.2 will include all
features planned for 2.0 that can be introduced in a backward compatible way as well as new
deprecation notices for functionality we plan to remove in 2.0, which we hope will ease future migration.</p>
<a id="title.4"></a><h1>Doctrine MongoDB ODM release 1.0.7</h1>
<p>We are also happy to announce the immediate availability of Doctrine MongoDB ODM
<a href="https://github.com/doctrine/mongodb-odm/releases/tag/1.0.7">1.0.7</a>.</p>
<p>Notable fixes may be found in the
<a href="https://github.com/doctrine/mongodb-odm/blob/master/CHANGELOG-1.0.md#107-2016-07-27">changelog</a>.
A full list of issues and pull requests included in this release may be found in the
<a href="https://github.com/doctrine/mongodb-odm/issues?q=milestone%3A1.0.7">1.0.7 milestone</a>.</p>
<p>You can install the latest version using the following <code>composer.json</code> definitions:</p>
<pre><code class="json">{
    &quot;require&quot;: {
        &quot;doctrine/mongodb-odm&quot;: &quot;^1.0.7&quot;
    }
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Doctrine Data-Fixtures 1.2.0 Released]]></title>
            <link href="https://staging.doctrine-project.org/2016/06/19/data-fixtures-1-2-0/"/>
            <updated>2016-06-19T00:00:00-04:00</updated>
            <id>https://staging.doctrine-project.org/2016/06/19/data-fixtures-1-2-0/</id>
            <content type="html"><![CDATA[<p>We are happy to announce the immediate availability of Doctrine Data-Fixtures
<a href="https://github.com/doctrine/data-fixtures/releases/tag/v1.2.0">1.2.0</a>.</p>
<p>This release fixes an issue that prevented further development of <code>doctrine/orm</code>,
since an internal class of the ORM was used inside the <code>doctrine/data-fixtures</code>
package. This issue is now solved by implementing a custom
<code>`TopologicalSorter</code> &lt;https://github.com/doctrine/data-fixtures/blob/v1.2.0/lib/Doctrine/Common/DataFixtures/Sorter/TopologicalSorter.php&gt;<a href="https://github.com/doctrine/data-fixtures/pull/222">_
in the library. `#222</a></p>
<p>Additionally an issue with double escaping caused issues when deleting from tables
with quoted names. <a href="https://github.com/doctrine/data-fixtures/pull/221">#221</a></p>
<p>Please also be aware that this release drops support for PHP 5.5 and below.
Given that PHP 5.5 is going to exit its official
<a href="http://php.net/supported-versions.php">security support schedule</a> very soon,
we strongly recommend that all users upgrade their PHP installations as well.</p>
<a id="title.1"></a><h1>Installation</h1>
<p>You can install the ORM component using Composer:</p>
<pre><code class="shell">composer require doctrine/data-fixtures:^1.2.0
</code></pre>
<p>Please report any issues you may have with the update on the
<a href="https://github.com/doctrine/data-fixtures/issues">issue tracker</a>.</p>
]]></content>
        </entry>
    </feed>